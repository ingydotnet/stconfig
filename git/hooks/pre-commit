#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by git-commit with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, make this file executable.

# This is slightly modified from Andrew Morton's Perfect Patch.
# Lines you introduce should not have trailing whitespace.
# Also check for an indentation that has SP before a TAB.

if git-rev-parse --verify HEAD 2>/dev/null
then
    git-diff-index -p -M --cached HEAD --
else
    # NEEDSWORK: we should produce a diff with an empty tree here
    # if we want to do the same verification for the initial import.
    :
fi |
perl -e '
    my $found_bad = 0;
    my $filename;
    my $reported_filename = "";
    my $lineno;
    sub bad_line {
        my ($why, $line) = @_;
        if (!$found_bad) {
            print STDERR "*\n";
            print STDERR "* You have some suspicious patch lines (use -n to force):\n";
            print STDERR "*\n";
            $found_bad = 1;
        }
        if ($reported_filename ne $filename) {
            print STDERR "* In $filename\n";
            $reported_filename = $filename;
        }
        print STDERR "* $why (line $lineno)\n";
        print STDERR "$filename:$lineno:$line\n";
    }
    while (<>) {
        if (m|^diff --git a/(.*) b/\1$|) {
            $filename = $1;
            next;
        }
        if (/^@@ -\S+ \+(\d+)/) {
            $lineno = $1 - 1;
            next;
        }
        if (/^ /) {
            $lineno++;
            next;
        }
        if (s/^\+//) {
            $lineno++;
            chomp;
            # if (/\s$/) {
            #     bad_line("trailing whitespace", $_);
            # }
            if (/^\s* \t/) {
                bad_line("indent SP followed by a TAB", $_);
            }
            if (/^([<>])\1{6} |^={7}$/) {
                bad_line("unresolved merge conflict", $_);
            }

            if (/^\s+use XXX/) {
                bad_line(qq{Indented "use XXX" is suspicious}, $_);
            }
            if (/(?<!#).*(?:WWW|XXX|YYY|ZZZ)/) {
                bad_line(qq{"use XXX"-style warning is suspicious}, $_);
            }

            if (/^\s+use Data::Dumper/) {
                bad_line(qq{Indented "use Data::Dumper" is suspicious}, $_);
            }
            if (/(?:print|warn).* Dumper/) {
                bad_line(qq{"use Data::Dumper"-style warning is suspicious}, $_);
            }

            if (/console.log\(.*\)/) {
                bad_line(qq{"console.log"-style warning is suspicious}, $_);
            }
        }
    }
    exit($found_bad);
'
