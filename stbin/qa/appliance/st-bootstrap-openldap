#!/usr/bin/perl
# @COPYRIGHT@

use strict;
use warnings;
use POSIX;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Long;
use Pod::Usage;
use File::Slurp qw(slurp write_file);
use File::Temp qw(tempfile);
use Fcntl qw(SEEK_SET);
use Socialtext::AppConfig;
use Socialtext::Bootstrap::OpenLDAP;

###############################################################################
# Read in our command line arguments.
my $daemonize = 0;
my ($help, $man);
GetOptions(
    'daemonize' => \$daemonize,
    'help|?'    => \$help,
    'man'       => \$man,
) || pod2usage(1);
pod2usage(1) if ($help);
pod2usage( -exitstatus=>0, -verbose=>2 ) if ($man);

###############################################################################
# Perform the action specified on the command line
my %actions = (
    'start'     => \&start,
    'stop'      => \&stop,
    'status'    => \&status,
);
my $action = shift @ARGV;
pod2usage(1) unless ($action && exists $actions{$action});

$actions{$action}->();

###############################################################################
# All done; exit peacefully.
exit;


###############################################################################
# Start.  Bootstraps a copy of OpenLDAP, adds data to it, and sets it up as a
# viable user factory.  This method does *NOT* return.
sub start {
    my $pidfile = _pidfile();

    # kill off any other running copy of st-bootstrap-openldap; we only allow
    # for a single copy of this to be running per-user.
    _kill_running_copy_of_ourselves();

    # get the LDIF data we want to add; once we daemonize we'll lose the DATA
    # filehandle.
    my $ldif_data = slurp(\*DATA);

    # daemonize ourselves, if needed.
    #
    # we'll keep an eye out for the PID file which is generated by the child
    # process when its finished bootstrapping OpenLDAP.
    if ($daemonize) {
        my $child_pid = _daemonize();
        if ($child_pid) {
            # we're in the parent; wait for child to start, then exit.
            print "waiting for OpenLDAP to start...\n";
            for (0 .. 10) {
                last if (-e $pidfile);
                sleep(1);
            }
            status();
            exit;
        }
    }

    # bootstrap OpenLDAP, and populate it with data.
    #
    # also set up a signal handler so that we properly shut down OpenLDAP when
    # we get killed off
    my $openldap;
    $SIG{INT} = sub { undef $openldap; exit; };
    $openldap = Socialtext::Bootstrap::OpenLDAP->new(
        base_dn     => 'dc=socialtext,dc=com',
        root_dn     => 'cn=Manager,dc=socialtext,dc=com',
        );


    my $ldif_fh = tempfile();
    $ldif_fh->print($ldif_data);
    seek $ldif_fh, 0, SEEK_SET;
    $openldap->add($ldif_fh) || die "can't add data to LDAP server\n";
    $ldif_fh->close();

    # configure ldap.yaml based on this bootstrapped OpenLDAP instance
    my $ldapcfg   = $openldap->ldap_config();
    my $ldap_id   = $ldapcfg->id();
    my $factories = "LDAP:$ldap_id;Default";

    Socialtext::LDAP::Config->save($ldapcfg);

    # configure user_factories so OpenLDAP can be used as a user source
    my $appconfig = Socialtext::AppConfig->new();
    $appconfig->set( 'user_factories', $factories );
    $appconfig->write();

    # update PID file to show that *we* are running.
    #
    # we do this *after* starting OpenLDAP, so that if we're daemonizing then
    # our parent process knows that we're all done.
    write_file($pidfile, { atomic => 1 }, $$);

    # let user know we're done, then pause indefinately.
    print qq{
OpenLDAP has been bootstrapped, is running, has been populated with users, and
the Wiki has been configured to use it as a source for users.

Press ^C to abort.
};
    sleep(1) while 1;
}

###############################################################################
# Stop.  Kills off any running copy, and resets the user factories back to
# their default value.
sub stop {
    # kill off any other running copy of st-bootstrap-openldap
    _kill_running_copy_of_ourselves();

    # reset the user_factories back to the default
    my $appconfig = Socialtext::AppConfig->new();
    $appconfig->set( 'user_factories', 'Default' );
    $appconfig->write();
}

###############################################################################
# Status.  Checks to see if there's a bootstrapped copy of OpenLDAP running
# already.
sub status {
    # check if there's a copy of ourselves already running
    my $pidfile = _pidfile();
    if (-e $pidfile) {
        my $pid = slurp($pidfile);
        if (_is_running($pid)) {
            print "$0 running; pid $pid\n";
            exit;
        }
    }
    print "$0 not running\n";
}

###############################################################################
# Returns the full path to the file we use to hold our PID.
sub _pidfile {
    return "/tmp/st-bootstrap-openldap-$<.pid";
}

###############################################################################
# Check to see if the given PID is running.
sub _is_running {
    return kill(0, shift);
}

###############################################################################
# Daemonizes the process.  Returns the PID of the child to the parent, returns
# nothing to the child.
sub _daemonize {
    my $pid = fork();
    return $pid if $pid;

    ### we're in the child process...
    ###
    ### code here loosely based on that in Proc::Daemon

    # detach ourselves from the terminal
    POSIX::setsid();

    # close all other open file descriptors
    #
    # NOTE: we close "2 .." instead of "0 .." as slapd fails to start if we
    # close 0,1.  Unsure why (as we're going to reopen them to /dev/null
    # anways), but it does.
    my $openmax = POSIX::sysconf( &POSIX::_SC_OPEN_MAX );
    $openmax = 64 if ((!defined $openmax) || ($openmax < 0));

    POSIX::close($_) foreach (2 .. $openmax);

    # re-open standard descriptors, all to /dev/null
    open STDIN,  '+>/dev/null';
    open STDOUT, '+>&STDIN';
    open STDERR, '+>&STDIN';

    return;
}

###############################################################################
# Kills off a running copy of ourselves, *if* one is running.
sub _kill_running_copy_of_ourselves {
    my $pidfile = _pidfile();

    if (-e $pidfile) {
        my $pid = slurp($pidfile);
        if (_is_running($pid)) {
            print "killing off $0...\n";
            kill(2, $pid);
            for (0 .. 5) {
                sleep(1);
                goto DONE_KILLING_OFF_SELF unless _is_running($pid);
            }

            print "... didn't die off; killing -9 ...\n";
            kill(9, $pid);
            for (0 .. 5) {
                sleep(1);
                goto DONE_KILLING_OFF_SELF unless _is_running($pid);
            }

            die "... can't kill $0; aborting\n";
        }
    }

  DONE_KILLING_OFF_SELF:
    unlink $pidfile;
}

=head1 NAME

st-bootstrap-openldap - Bootstrap OpenLDAP instance for testing

=head1 SYNOPSIS

  st-bootstrap-openldap [options] <action>

  Actions:
    start           Start an OpenLDAP instance for testing
    stop            Stop any running OpenLDAP instance
    status          See if an OpenLDAP instance is running

  Options:
    --daemonize     Daemonize, running OpenLDAP in the background
    --help/-?       Brief help message
    --man           Full documentation

  Example:
    st-bootstrap-openldap --daemonize start

=head1 DESCRIPTION

C<st-bootstrap-openldap> is a command line utility to help bootstrap an
OpenLDAP instance for testing.

When bootstrapped, the OpenLDAP instance is populated with some test data and
Socialtext is then configured to use this instance as a user factory.

This script automatically kills any running copy of itself on subsequent
starts.  Its safe to just do C<st-bootstrap-openldap --daemonize start>
repeatedly; each time you'll get a brand new OpenLDAP instance.

=head1 OPTIONS

=over

=item B<start>

Kills off any running OpenLDAP instance and starts a new one.

=item B<stop>

Stops any running OpenLDAP instance.

=item B<status>

Checks to see if an OpenLDAP instance is running.

=item B<--daemonize>

When starting an OpenLDAP instance, daemonize it and fire it off into the
background.  Without this option, C<st-bootstrap-openldap> will pause on the
console waiting for you to hit ^C to stop the instance.

=item B<--help/-?>

Displays a brief help message.

=item B<--man>

Displays the full documentation.

=back

=head1 AUTHOR

Socialtext, Inc.  C<< <code@socialtext.com> >>

=head1 COPYRIGHT

Copyright 2008 Socialtext, Inc.,  All Rights Reserved.

=cut

__DATA__
# Base organization
dn: dc=socialtext,dc=com
objectClass: dcObject
objectClass: organization
dc: socialtext
o: socialtext dot com

# A user that only exists in LDAP
dn: cn=ldapuser,dc=socialtext,dc=com
objectClass: inetOrgPerson
cn: ldapuser
gn: LDAP
sn: User
mail: ldapuser@null.socialtext.com
userPassword: ld@pu53r

# QAs test user
dn: cn=devnull3,dc=socialtext,dc=com
objectClass: inetOrgPerson
cn: devnull3
gn: Dev Null
sn: Three
mail: devnull3@socialtext.com
userPassword: ldapd3v
