#!/usr/bin/perl
use strict;
use warnings;
use lib "$ENV{HOME}/src/st/current/nlw/lib";
use Term::ANSIColor;
use Socialtext::System qw/shell_run/;
use Getopt::Long;
use Socialtext::BuildUtils qw/display/;

die "this tool is broken until someone ports it to git\n";
# NOTE: s/trunk/master/

my %opts;
GetOptions( \%opts,
    'pretend',
    'message=s',
    'from=s',
    'repo=s',
    'force',
) or usage();

my $branch = shift;
usage() unless $branch;

my $from_branch = $opts{from} || "trunk";
my $smerge_opts  = $opts{pretend} ? '-C ' : '';

my %repo_names = map { $_ => 1 } split /\s+/, qx(st-repo-list);
$opts{repo} ||= 'all';
$opts{repo} = join(',', keys %repo_names) if $opts{repo} =~ m/^all$/i;
my @repos = split ',', $opts{repo};
for my $r (@repos) {
    usage("$r is not a valid repository") unless $repo_names{$r};
}

$opts{message} ||= "update-branch $branch from $from_branch";
$smerge_opts .= "-m '$opts{message}'";

shell_run("refresh-branch --quiet $from_branch");
shell_run("refresh-branch --quiet $branch");

color_print('green', "Updating $branch from $from_branch\n");
for my $repo (@repos) {
    my $svk_base = "//mirror/$repo";
    my $branch_prefix = "branches/";
    $branch_prefix = '' if $branch =~ m#tags/#;
    my $from_branch_prefix = "branches/";
    $from_branch_prefix = '' if $from_branch =~ m#tags/#;
    $from_branch_prefix = '' if $from_branch eq 'trunk';
    my $branch_path      = "$svk_base/$branch_prefix$branch";
    my $from_branch_path = "$svk_base/$from_branch_prefix$from_branch";

    color_print('magenta', "Updating $repo repository.\n");
    eval {
        shell_run(
            "svk smerge $smerge_opts $from_branch_path $branch_path"
        );
    };
    if ($@) {
        color_print('red', "Error: $@\n");
        exit unless $opts{force};
    }
    else {
        color_print('green', "Branch $branch updated!\n");
    }
}
shell_run("refresh-branch --quiet $branch");
color_print('green', "All done!\n");

exit;

sub usage {
    die <<EOT;
$0 [rester options] [options] new-branch-name

Update a branch from a base branch using SVK.

Requires you have SVK set up!

options:
  --pretend     don't really do the merge (svk smerge -C)
  --from        branch to update from (default: trunk)
  --repo <repo> Specify the repo to use
  --force       Don't ... give ... up ...
EOT
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    print color($color), $msg, color('reset');
}
