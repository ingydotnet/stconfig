#!/usr/bin/perl
use strict;
use warnings;
use lib "$ENV{HOME}/src/st/current/nlw/lib";
use Socialtext::System qw/shell_run/;
use Getopt::Long;

my %opts;
GetOptions( \%opts,
    'pretend',
    'message=s',
    'from=s',
    'repo=s',
) or usage();

my $branch = shift;
usage() unless $branch;

my $from_branch = $opts{from} ? "branches/$opts{from}" : "trunk";
my $from_dir = $opts{from} || 'trunk';
my $smerge_opts  = $opts{pretend} ? '-C ' : '';

my %repo_names = map { $_ => 1 } split /\s+/, qx(st-repo-list);
$opts{repo} ||= 'socialtext'; # Default to avoid changing behaviour
$opts{repo} = join(',', keys %repo_names) if $opts{repo} =~ m/^all$/i;
my @repos = split ',', $opts{repo};
for my $r (@repos) {
    usage("$r is not a valid repository") unless $repo_names{$r};
    $r =~ s/^reports?$/socialtext-reports/; # shorthand
}

$opts{message} ||= "update-branch $branch from $from_branch";
$smerge_opts .= "-m '$opts{message}'";

for my $repo (@repos) {
    my $svk_base = "//mirror/$repo";
    my $branch_path = "$svk_base/branches/$branch";
    if ($repo ne 'socialtext') {
        $from_dir = "$repo/$from_dir";
        $branch = "$repo/branches/$branch";
    }
    map { shell_run($_) }
        "svk up -s ~/src/st/$from_dir",
        "svk up -s ~/src/st/$branch",
        "svk smerge $smerge_opts $svk_base/$from_branch $branch_path",
        "svk up -s ~/src/st/$branch",
        "cowsay 'Branch $branch updated!'",
        ;
}

exit;

sub usage {
    die <<EOT;
$0 [rester options] [options] new-branch-name

options:
  --pretend     don't really do the merge (svk smerge -C)
  --from        branch to update from (default: trunk)
  --repo <repo> Specify the repo to use
EOT
}
