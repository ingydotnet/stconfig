#!/usr/bin/perl
use strict;
use File::Temp;
use File::Basename;
use URI::Escape;

BEGIN { $SIG{__WARN__} = sub { 0 } };

=head1 NAME

st-tap2html - Convert Wikitest TAP output to HTML format

=head1 SYNOPSIS

Generate HTML output as part of run-wiki-tests:

    # Also writes failed tests to "stdin.failed".
    run-wiki-tests ... | st-tap2html > output.html

Or, as two steps, saving the intermediate output file:

    # First, run the test and capture its output
    run-wiki-tests ... >& testcases.out

    # Then this writes "testcases.html" and "testcases.failed"
    st-tap2html testcases.out

One can also capture the input via stdin redirection:

    # This writes "stdin.html" and "stdin.failed"
    st-tap2html < testcases.out

=head1 DESCRIPTION

Wikitests emit TAP output.  This utility converts these files into HTML
viewable by the developer via URL in the browser.

For each test plan (as denoted by "Loading test plan ..." in the output), we
generate a separate test section.  Then we provide an master view that shows a
summary view and links to those detailed test pages.

=head2 Features

=over 4

=item * Red/green display (that's what the existing tap2html does, slightly ugly)

=item * Cope with not only "not ok" but also "Failure during ...".

=item * Click on display to open corresponding section of TAP output file.

=item * Capture the STDERR output in individual section logs.

=back

=head1 AUTHORS

Ken Pier, Audrey Tang

=cut

my $output_file;
if (!@ARGV and -t STDIN) {
    exec("perldoc" => $0);
}

if (@ARGV and -t STDOUT) {
    $output_file = $ARGV[0];
    $output_file =~ s/^(.*)\.[^\/\\]+$/$1.html/
        or $output_file .= ".html";
}
elsif (!@ARGV and -t STDOUT) {
    $output_file = "stdin.html";
}

my $input_file = (@ARGV ? $ARGV[0] : '-');
my $failed_file = (@ARGV ? $ARGV[0] : 'stdin.failed');
$failed_file =~ s/^(.*)\.[^\/\\]+$/$1.failed/
    or $failed_file .= ".failed";

my $dir = File::Temp::tempdir( CLEANUP => 1 );
my @tests;
my $c = 0;
my $suffix = '';
my %seen_test_case;
while (<>) {
    if (/Loading test plan Test Case: (.*)\.\.\./i
            or
        /comment: STARTING: Test Case: (.*)/i
            or 
        /Including wikitest commands from \[(?:Test Case: )?(.*)\]/i
    ) {
        $seen_test_case{$1} = 1;
        start_test("$1$suffix");
        $c = 0;
    }
    elsif (/Loading test plan (.*)\.\.\./i) {
        $suffix = " ($1)";
    }
    elsif (/^# Looks like your test died just after \d/) {
        $c++;
        print FH "not ok $c - $_";
    }
    else {
        my $changed;
        $changed++ if s/^(1\.\.\d+)$/# $1/;
        $changed++ if s/^((?:not )?ok )(\d+)/$1 . ++$c/e;
        if ($changed and not @tests) {
            start_test(basename($input_file));
        }
        print FH $_;
    }
}
print FH "1..$c\n";
close FH;

sub start_test {
    my $name = shift;
    $name =~ s/:/-/g if $^O eq 'MSWin32';

    while (grep { $_ eq $name } @tests) {
        $name .= "+";
    }
    push @tests, $name;
    print FH "1..$c\n" if defined $c;
    close FH;
    open FH, '>:utf8', "$dir/$name";
    select FH;
    print FH "use utf8; binmode STDOUT, ':utf8'; print <DATA>;\n__DATA__\n";
}

use Encode;
use TAP::Formatter::HTML 0.07;
use TAP::Harness;
use Cwd;

my $cwd = Cwd::getcwd();

chdir $dir;
my $out = '';
open FH, '>', \$out;
my $fmt = TAP::Formatter::HTML->new;
$fmt->output_fh(\*FH)->silent(1);
my $harness = TAP::Harness->new({ formatter => $fmt, merge => 1 });
$harness->runtests( @tests );

$out =~ s/.*<html>\n<head>\n/<html><head><meta http-equiv="Content-Type" content="text\/html; charset=utf-8">/s;
$out =~ s{<link rel="stylesheet" type="text/css" href="file:([^"]+)" />}{
    local $/;
    open my $fh, '<:utf8', uri_unescape($1);
    '<style>' . scalar <$fh> . '</style>';
}eg;
$out =~ s{<script type="text/javascript" src="file:([^"]+)"></script>}{
    local $/;
    open my $fh, '<:utf8', uri_unescape($1);
    '<script type="text/javascript">' . scalar <$fh> . '</script>';
}eg;

chdir $cwd;
Encode::_utf8_off($out);
Encode::from_to($out, utf8 => 'latin1');
Encode::_utf8_on($out);

if ($output_file) {
    open FH, '>:utf8', $output_file;
    select FH;
}
else {
    binmode STDOUT, ':utf8';
    select STDOUT;
}
my @failed = ($out =~ m{<a class="file" href="#" title="Test failed![^>]*>([^<]+)</a>}g);
if (@failed) {
    open FAIL, '>:utf8', $failed_file;
    my $fail_section = '';
    foreach my $fail (@failed) {
        $fail =~ s/\+*$//; # Remove de-dup marks.

        if ($fail =~ s/ \(([^)]+)\)$//) {
            if ($fail_section ne $1) {
                print FAIL "\n\n" if $fail_section;
                print FAIL "$1\n";
                $fail_section = $1;
            }
        }

        if ($seen_test_case{$fail}) {
            $fail = "Test Case: $fail";
        }

        print FAIL "* [$fail]\n";
    }
}

foreach my $orig (split(/\n/, $out)) {
    my $line = $orig;
    eval {
        Encode::_utf8_off($line);
        Encode::from_to($line, utf8 => 'latin1', Encode::FB_CROAK());
        $line = Encode::decode_utf8($line, Encode::FB_CROAK());
        print "$line\n";
    } or print "$orig\n";
}
