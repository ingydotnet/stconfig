#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use lib "$ENV{ST_CURRENT}/nlw/lib";
use Socialtext::System qw/shell_run/;
use Fatal qw/mkdir/;

$| = 1;
my $ve_host = 'zircon.socialtext.net' || $ENV{ST_VE_HOST};
my $ve_name;
my $upgrade_to;
GetOptions(
    'v|ve-name=s' => \$ve_name,
    'u|upgrade-to=s' => \$upgrade_to,
) or usage ();
usage('upgrade-to is mandatory!') unless $upgrade_to;
usage('ve-name is mandatory!') unless $ve_name;

my $log_dir = "$ENV{HOME}/upgrade-results";
-d $log_dir or mkdir $log_dir;

my @from_versions = qw(
    release-2.18.2.0-1
    release-2.19.0.4-1
    release-2.20.1.1-1
    release-2.20.3.1-5
    release-2.20.4.1-9
    release-2.20.4.4-1
    release-2.22.1.7-1
);

local $Socialtext::System::SILENT_RUN = 1;
for my $base_version (@from_versions) {
    next if $base_version eq $upgrade_to;
    print "Testing upgrade from $base_version to $upgrade_to ... ";
    my $log_file = "$log_dir/upgrade--$base_version--to--$upgrade_to.log";
    shell_run("date > $log_file");
    eval { 
        shell_run("vest --ve $ve_name --repo $base_version >> $log_file 2>&1");
    };
    if ($@) {
        print "install failed - moving on.\n";
        next;
    }
    print "installed, upgrading ...";
    shell_run("date >> $log_file");
    eval {
        shell_run("vest --ve $ve_name --upgrade-to $upgrade_to >> $log_file 2>&1");
    };
    if ($@) {
        print "Upgrade failed.\n";
        next;
    }
    shell_run("date >> $log_file");
    print "done - $log_file\n";
}

exit;

sub usage {
    my $msg = shift ||'';
    die <<EOT;
$msg

USAGE: $0 <opts> command

Options:
  -v --ve-name  Name of the VE to operate on
  -u --upgrade  Name of the debian repo to upgrade to
EOT
}
