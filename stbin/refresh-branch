#!/usr/bin/perl
use strict;
use warnings;
use lib "$ENV{ST_SRC_BASE}/current/nlw/lib";
use Term::ANSIColor;
use Getopt::Long;

my %opts;
GetOptions( \%opts,
    'quiet',
    'no-restart'
) or usage();

git_all(($opts{quiet} ? '@' : '') . 'pull --rebase');

<<<<<<< HEAD:stbin/refresh-branch
exit;
=======
my $src_base = $ENV{ST_SRC_BASE} or die "\$ST_SRC_BASE is not defined!";
my $current = readlink("$src_base/current");
die "No current branch set!" unless $current;
(my $branch_name = $current) =~ s#.+/##;
$branch_name = $what_to_refresh if $what_to_refresh;

if ($branch_name eq 'trunk') {
    warn color('red') . "Warning:". color('reset')
        . " you are attempting to use the deprecated 'trunk' branch.\n";
    warn "In the future use 'master'. Substituting 'master' for 'trunk'.\n\n";
    $branch_name = 'master';
}

unless (-d "$src_base/$branch_name") {
    die << ".";
$src_base/$branch_name does not exist.

Please run this command instead:

    set-branch $branch_name

.
}

my @repos = split m/\s+/, qx(st-repo-list);
for my $r (@repos) {
    color_print('yellow', "Updating $branch_name - $r\n");
>>>>>>> * Update 'refresh-branch' so it can s/trunk/master/.:stbin/refresh-branch

sub git_all {
    my $cmd = shift;
    shell_run("st-git-all $cmd");
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    print color($color), $msg, color('reset');
}


sub shell_run {
    my $cmd = shift;
    my $nodie = $cmd =~ s/^-//;
    warn "+ $cmd\n" if $cmd =~ m/git/;
    my $rc = system $cmd;
    unless ($rc == 0) {
        color_print('red', "Error running $cmd\n");
        exit $rc unless $nodie;
    }
    return $rc == 0;
}

sub usage {
    die <<EOT;
USAGE: $0 [--quiet] [branch]

Update the current (or specified branch) across all repositories.
EOT
}
