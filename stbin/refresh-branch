#!/usr/bin/perl
use strict;
use warnings;
use lib "$ENV{ST_SRC_BASE}/current/nlw/lib";
use Term::ANSIColor;
use Getopt::Long;

my %opts;
GetOptions( \%opts,
    'quiet',
    'no-restart'
) or usage();

my $cmd = ($opts{quiet} ? '@' : '') . 'pull --rebase';
shell_run("st-git-all $cmd");
update_submodules("$ENV{ST_SRC_BASE}/current");
update_submodules("$ENV{ST_SRC_BASE}/current/plugins");

exit;

sub update_submodules {
    my $path = shift;

    chdir $path;

    shell_run("git submodule init");
    shell_run("git submodule update");

    # We should only "pull --rebase" if we're on master; otherwise the remote
    # has nothing new for us since we're on an old master branch.
    my $ref = do {
        local $ENV{GIT_DIR} = "$path/.git";
        `git symbolic-ref -q HEAD 2>/dev/null`;
    };
    chomp $ref;
    return unless $ref;
    (my $branch = $ref) =~ s#refs/heads/##;
    return unless $branch eq 'master';

    for (`git submodule status`) {
         # Each line is a submodule, for example:
         #  767c95e4023c56387bb42680690a54604be19f76 nlw/share/skin/common/submodule/js-class (heads/master)
         m{^
            \s*          # beginning of string
            \w+          # SHA sum
            \s+          # space
           (\S+)         # submodule path - captured as $1
         }x or die "Malformed git submodule status line: $_)";
         chdir $1;
         shell_run("git checkout -q $branch"); # Pull rebase in the submodule, too
         shell_run("git $cmd"); # Pull rebase in the submodule, too
         chdir $path;
    }
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    print color($color), $msg, color('reset');
}


sub shell_run {
    my $cmd = shift;
    my $nodie = $cmd =~ s/^-//;
    warn "+ $cmd\n" if $cmd =~ m/git/;
    my $rc = system $cmd;
    unless ($rc == 0) {
        color_print('red', "Error running $cmd\n");
        exit $rc unless $nodie;
    }
    return $rc == 0;
}

sub usage {
    die <<EOT;
USAGE: $0 [--quiet] [branch]

Update the current (or specified branch) across all repositories.
EOT
}
