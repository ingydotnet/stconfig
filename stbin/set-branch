#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor 'color';
use File::Path qw/mkpath/;
use Fatal qw/:void mkpath chdir unlink symlink/;
use English;
use List::Util qw(first);
use Getopt::Long;

my $git_base = $ENV{ST_GIT};
my $src_base = $ENV{ST_SRC_BASE};
my $cache_base = $ENV{ST_GIT_CACHE} || '/var/cache/git/repos/socialtext';

sub usage {
    my $i = 1;
    my @branches = map { sprintf('  %2d - %s', $i++, $_) } branch_list();
    
    local $LIST_SEPARATOR = "\n";
    die <<EOT;
USAGE: set-branch [--refresh] <branch>

Pulls code from github for our main repositories and allows you to change
branches.

Code will be placed into ST_SRC_BASE (currently: $src_base)

Basic options:
    --refresh   pull latest changes from github, branch stays the same
                (tool alias: refresh-branch or rb)
    --overwrite use a clean checkout, replacing existing (cannot be combined
                with --refresh)
    --quiet     be a bit less noisy

Advanced options:
    --offline   don't use github servers; use local git repositories only
    --repack    repack your local git repos to use a shared cache
                (located at $cache_base, use ST_GIT_CACHE to override)

Existing branches:
@branches
EOT
}


my $offline = 0;
my $overwrite = 0;
my $refresh_mode = 0;
my $repack_mode = 0;
my $quiet = 0;
my $Is_tag = 0;

my ($git_ver,$git_ver_maj,$git_ver_min,$git_ver_patch);
{
    my $ver = `git --version`;
    chomp $ver;
    ($git_ver,$git_ver_maj,$git_ver_min,$git_ver_patch) =
        ($ver =~ /^.*?(\d+)\.(\d+)\.(\d+)(?:\.(\d+))?.*?$/);
}

GetOptions(
    'offline!' => \$offline,
    'overwrite!' => \$overwrite,
    'refresh' => \$refresh_mode,
    'quiet' => \$quiet,
    'repack' => \$repack_mode,
);

my $branch = shift || '';

if ($branch eq 'trunk') {
    warn color('red') . "Warning:". color('reset')
        . " you are attempting to use the deprecated 'trunk' branch.\n";
    warn "In the future use 'master'. Substituting 'master' for 'trunk'.\n\n";
    $branch = 'master';
}

unless (-d $src_base) {
    mkpath $src_base;
    $refresh_mode = 0;
}
my @repos = (split /\s+/,`st-repo-list`);
chomp @repos;

$branch = num_to_name($branch) if $branch =~ m/^\d+$/;
usage() unless ($branch or $refresh_mode);
$branch =~ s#^tags/##;

chdir $src_base;

unless (-d 'socialtext') {
    clone_master();
    $refresh_mode = 0;
    $branch = 'master';
}

# make sure that we've got the sub repos set up
foreach my $repo (@repos) {
    next if $repo eq 'socialtext';
    clone_repo($repo) unless -d repo_git_dir($repo);
}

git_all('@-checkout .gitignore nlw/.gitignore >/dev/null || true');

if ($refresh_mode) {
    shell_run('st-git-all '. ($quiet ? '@' : '') . 'pull --rebase');
}
else {
    assert_branch_exists($branch);
    foreach my $repo (@repos) {
        $quiet or color_print('blue', "Setting working copy of $repo to $branch\n");
        checkout_branch($repo, $branch);
    }
}

if ($repack_mode) {
    unless (-d $cache_base && -r _) {
        color_print('red', "Cannot locate git cache, expected it to be at $cache_base\n");
        exit 1;
    }
    foreach my $repo (@repos) {
        my $dir = repo_dir($repo);
        next if -e "$dir/.git/objects/info/alternates";
        my $cache_dir = "$cache_base/$repo.git";
        unless (-d $cache_dir && -r _) {
            color_print('red', "Cache dir $cache_dir isn't readable");
            exit 1;
        }

        chdir $dir;

        $quiet or color_print('blue', "Repacking $dir to use cache $cache_dir\n");
        set_alternates($dir, $cache_dir);
        my $before = `du -sh .git`;
        $before =~ s/\s.+$//sm;
        shell_run("git repack -l -a -d");
        my $after = `du -sh .git`;
        $after =~ s/\s.+$//sm;
        color_print('green', "... done, before: $before, after: $after\n");
    }
}

shell_run("cd $ENV{ST_SRC_BASE}/socialtext && refresh-submodules");

exit;

sub have_git ($$;$$) {
    $_[2] ||= 0;
    $_[3] ||= 0;
    return 1 if ($git_ver > $_[0]);
    return if ($git_ver < $_[0]);
    return 1 if ($git_ver_maj > $_[1]);
    return if ($git_ver_maj < $_[1]);
    return 1 if ($git_ver_min > $_[2]);
    return if ($git_ver_min < $_[2]);
    return 1 if ($git_ver_min >= $_[3]);
    return;
}

sub update_submodules {
    my $path = shift;

    chdir $path;
    shell_run("git submodule init");
    shell_run("git submodule update");

    # We should only "git checkout master" if we're on master; otherwise the remote
    # has nothing new for us since we're on an old master branch.
    my $ref = do {
        local $ENV{GIT_DIR} = "$path/.git";
        `git symbolic-ref -q HEAD 2>/dev/null`;
    };
    chomp $ref;
    return unless $ref;
    (my $branch = $ref) =~ s#refs/heads/##;
    return unless $branch eq 'master';

    for (`git submodule status`) {
         # Each line is a submodule, for example:
         #  767c95e4023c56387bb42680690a54604be19f76 nlw/share/skin/common/submodule/js-class (heads/master)
         m{^
            \s*          # beginning of string
            \w+          # SHA sum
            \s+          # space
           (\S+)         # submodule path - captured as $1
         }x or die "Malformed git submodule status line: $_)";
         chdir $1;
         shell_run("git checkout -q master"); # Submodules should always be on the "master" branch
         chdir $path;
    }
}

sub assert_branch_exists {
    # check if the branch exists, exit if not
    unless (branch_exists($branch) || remote_branch_exists($branch) || tag_exists($branch)) {
        color_print('red',
            "Couldn't find a local or upstream branch, '$branch'");
        exit 1;
    }
}

sub _show_ref_exists {
    my $ref = shift;
    my $dir = shift || "$src_base/socialtext";
    local $ENV{GIT_DIR} = "$dir/.git";
    my $rc = system("git show-ref $ref >/dev/null 2>&1");
    return ($rc == 0);
}

sub remote_branch_exists {
    my $branch = shift;
    my $dir = shift;
    return _show_ref_exists(qq{refs/remotes/origin/$branch},$dir);
}

sub branch_exists {
    my $branch = shift;
    my $dir = shift;
    return _show_ref_exists(qq{refs/heads/$branch},$dir);
}

sub tag_exists {
    my $tag = shift;
    my $dir = shift;
    return _show_ref_exists(qq{refs/tags/$tag},$dir);
}

sub git_all {
    my $cmd = shift;
    shell_run("st-git-all $cmd");
}

sub shell_run {
    my $cmd = shift;
    my $nodie = $cmd =~ s/^-//;
    warn "+ $cmd\n" if $cmd =~ m/git/;
    my $rc = system $cmd;
    unless ($rc == 0) {
        color_print('red', "Error running $cmd\n");
        exit $rc unless $nodie;
    }
    return $rc == 0;
}

sub num_to_name {
    my $num = shift;
    my @branches = branch_list();
    $num--; # was 1 based
    return $branches[$num];
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    chomp $msg;
    print color($color), $msg, color('reset'), "\n";
}

sub branch_list {
    local $ENV{GIT_DIR} = "$src_base/socialtext/.git";
    my @branches = `git branch --no-color`;
    chomp @branches;
    @branches = sort {$a cmp $b } @branches;
    s/^\s+// for @branches;
    s/\s+$// for @branches;
    return @branches;
}

sub git_config {
    # assumes chdir or GIT_DIR is active
    my %config = do {
        local $/="\0";
        my @a = `git config -z --list`;
        chomp @a;
        map { split("\n",$_,2) } @a
    };
    return \%config;
}

sub clone_repo {
    my $repo = shift;
    my $dir = repo_dir($repo);

    if ($offline) {
        color_print('red', "can't clone from GitHub under --offline mode");
        exit 1;
    }

    my $cmd = 'clone';
    my $cache_dir = "/var/cache/git/repos/socialtext/$repo.git";
    if (-d $cache_dir && -r _) {
        $cmd .= " --reference $cache_dir";
        $quiet or color_print('blue', "Cloning $repo from GitHub to $dir, using local cache $cache_dir");
    }
    else {
        $quiet or color_print('blue', "Cloning $repo from GitHub to $dir");
    }

    shell_run(qq{git $cmd $git_base/$repo.git $dir});
}

sub repo_dir {
    my $repo = shift;
    return "$src_base/socialtext" if ($repo eq 'socialtext');
    return "$src_base/socialtext/$repo";
}

sub repo_git_dir {
    return repo_dir(shift) . '/.git';
}

sub checkout_branch {
    my $repo = shift;
    my $branch = shift;

    my $force = ($overwrite) ? '-f' : '';

    my $dir = repo_dir($repo);
    chdir $dir;

    my $origin_branch = "origin/$branch";
    my $has_local = branch_exists($branch,$dir);

    if ($Is_tag) {
        shell_run(qq{git checkout $force -q $branch});
    }
    elsif (!$has_local) {
        $quiet or color_print('yellow', "... Mapping $branch to $origin_branch\n");
        shell_run(qq{git checkout $force -q --track -b $branch $origin_branch});
    }
    else {
        shell_run(qq{-git checkout $force -q $branch}) or
            color_print('red', 
                "Conflicting files? try --overwrite or fix it yourself");
        my $config = git_config();
        if (($config->{"branch.$branch.remote"} || '') ne 'origin' &&
            remote_branch_exists($branch))
        {
            if (have_git(1,7)) {
                $quiet or color_print('yellow', "... making $branch track $origin_branch\n");
                shell_run(qq{git branch --set-upstream $branch $origin_branch});
            }
            else {
                color_print('red', "WARNING: Branch $branch isn't tracking an origin branch and therefore git-push/git-pull won't work.");
                $quiet or color_print('blue', "HINT: Edit the .git/config to fix this (or get git >= 1.7)");
            }
        }
    }
    chdir $src_base;
}

sub clone_master {
    $quiet or color_print('blue', "Setting up master repo from GitHub...");

    clone_repo('socialtext');

    if ($branch ne 'master') {
        assert_branch_exists($branch);
        checkout_branch('socialtext', $branch);
    }
}

sub set_alternates {
    my ($dir, $cache_dir) = @_;
    open my $alts, '>', "$dir/.git/objects/info/alternates"
        or die "can't open alternates file: $!";
    print $alts "$cache_dir/objects/\n";
    close $alts;
}
