#!/usr/bin/perl
use strict;
use warnings;
use File::Path qw/mkpath/;
use Fatal qw/:void mkpath chdir unlink symlink/;
use English;

my $branch = shift || '';
my $private = shift;

my $src_base   = $ENV{ST_SRC_BASE};
unless (-d $src_base) {
    mkpath $src_base;
}

$branch = num_to_name($branch) if $branch =~ m/^\d+$/;
usage() unless $branch;

my $branch_dir = "$src_base/$branch";
unless ( -d $branch_dir ) {
    if ( $branch eq 'trunk' ) {
        checkout($branch);
    }
    elsif ($branch =~ m#^tags/#) {
        checkout($branch);
    }
    elsif ($private) {
        checkout("private-branches/$branch");
    }
    else {
        checkout("branches/$branch");
    }
}

if (-d $branch_dir) {
    my $curlink = "$src_base/current";
    unlink $curlink if -l $curlink;
    symlink $branch_dir, $curlink;
}

create_repo_symlinks();
exit;

sub checkout {
    my $branch_path = shift;
    chdir $src_base;
    my $cmd = "scm checkout '$ENV{ST_CODE_REPO}/$branch_path'";
    print "Running $cmd\n";
    system($cmd);
}

sub create_repo_symlinks {
    my @repos = split /\s+/, qx(st-repo-list);
    for my $r (@repos) {
        next if $r eq 'socialtext';
        my $repo_branch = $branch eq 'trunk' 
            ? "$src_base/$r/trunk"
            : "$src_base/$r/branches/$branch";
        my $st_path = "$src_base/$branch/$r";
        next if -e $st_path;
        symlink $repo_branch => $st_path
            or warn "Can't symlink $repo_branch => $st_path: $!\n";
    }
}

sub num_to_name {
    my $num = shift;
    my @branches = branch_list();
    $num--; # was 1 based
    return $branches[$num];
}

sub usage {
    my $i = 1;
    my @branches = map { sprintf('  %2d - %s', $i++, $_) } branch_list();
    
    (my $current = readlink("$src_base/current")) =~ s#.+/##;
    @branches = map { s/^\s(\s+\d+\s\-\s\Q$current\E)$/*$1/; $_ } @branches;

    local $LIST_SEPARATOR = "\n";
    die <<EOT;
USAGE: set-branch <branch>

Existing branches:
@branches
EOT
}

sub branch_list {
    my @branches = sort glob("$src_base/*/nlw");
    return grep { $_ ne 'current' }
        map { s#.+/(.+)/nlw#$1#; $_ } @branches;
}
