#!/usr/bin/perl
use strict;
use warnings;
use File::Path qw/mkpath/;
use Fatal qw/:void mkpath chdir unlink symlink/;
use English;

my @repos = split /\s+/, qx(st-repo-list);
my $branch = shift || '';
my $private = shift;

my $src_base   = $ENV{ST_SRC_BASE};
unless (-d $src_base) {
    mkpath $src_base;
}

$branch = num_to_name($branch) if $branch =~ m/^\d+$/;
usage() unless $branch;

my $branch_dir = "$src_base/$branch";
if ( $branch eq 'trunk' ) {
    checkout($branch);
}
elsif ($branch =~ m#^tags/#) {
    checkout($branch);
}
elsif ($private) {
    checkout("private-branches/$branch");
}
else {
    checkout("branches/$branch");
}

if (-d $branch_dir) {
    my $curlink = "$src_base/current";
    unlink $curlink if -l $curlink;
    symlink $branch_dir, $curlink;
}

create_repo_symlinks();
exit;

sub checkout {
    my $path = shift;
    update_or_checkout($_, $path) for @repos;    
}

sub update_or_checkout {
    my ($repo, $path) = @_;
    chdir $src_base;
    my $dir = $repo eq 'socialtext' ? $branch : "$repo/$path";
    return if -d $dir;
    if ($ENV{SVN_COMMAND} eq 'svk') {
        shell_run("-scm sync //mirror/$repo") || return;
    }
    
    if (!-d $repo or shell_run("-scm info $repo")) {
        shell_run("scm checkout $ENV{ST_SVN}/$repo/$path $dir");
    }
    else {
        shell_run("scm up $dir");
    }
}

sub shell_run {
    my $cmd = shift;
    my $nodie = $cmd =~ s/^-//;
    warn $cmd;
    my $rc = system $cmd;
    exit unless $nodie or $rc == 0;
    return $rc == 0;
}

sub create_repo_symlinks {
    for my $r (@repos) {
        next if $r eq 'socialtext';
        my $repo_branch = $branch eq 'trunk' 
            ? "$src_base/$r/trunk"
            : $branch =~ m#^tags/# ? "$src_base/$r/$branch"
                                   : "$src_base/$r/branches/$branch";
        (my $just_branch = $branch) =~ s#^tags/##;
        my $st_path = "$src_base/$just_branch/$r";

        unlink $st_path if -l $st_path;
        symlink $repo_branch => $st_path
            or warn "Can't create repo symlink for $r - is it checked out?\n"
                    . "Trying to symlink $repo_branch to $st_path: $!\n";
    }
}

sub num_to_name {
    my $num = shift;
    my @branches = branch_list();
    $num--; # was 1 based
    return $branches[$num];
}

sub usage {
    my $i = 1;
    my @branches = map { sprintf('  %2d - %s', $i++, $_) } branch_list();
    
    (my $current = readlink("$src_base/current")) =~ s#.+/##;
    @branches = map { s/^\s(\s+\d+\s\-\s\Q$current\E)$/*$1/; $_ } @branches;

    local $LIST_SEPARATOR = "\n";
    die <<EOT;
USAGE: set-branch <branch>

Existing branches:
@branches
EOT
}

sub branch_list {
    my @branches = sort glob("$src_base/*/nlw");
    return grep { $_ ne 'current' }
        map { s#.+/(.+)/nlw#$1#; $_ } @branches;
}
