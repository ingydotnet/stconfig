#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor 'color';
use File::Path qw/mkpath/;
use Fatal qw/:void mkpath chdir unlink symlink/;
use English;
use List::Util qw(first);
use Getopt::Long;

my $offline = 0;
my $overwrite = 0;
my $Is_tag = 0;

GetOptions(
    'offline!' => \$offline,
    'overwrite!' => \$overwrite,
);

my $branch = shift || '';

if ($branch eq 'trunk') {
    warn color('red') . "Warning:". color('reset')
        . " you are attempting to use the deprecated 'trunk' branch.\n";
    warn "In the future use 'master'. Substituting 'master' for 'trunk'.\n\n";
    $branch = 'master';
}

my $git_base = $ENV{ST_GIT};
my $src_base = $ENV{ST_SRC_BASE};
unless (-d $src_base) {
    mkpath $src_base;
}
my @repos = (split /\s+/,`st-repo-list`);
chomp @repos;

$branch = num_to_name($branch) if $branch =~ m/^\d+$/;
usage() unless $branch;
$branch =~ s#^tags/##;

chdir $src_base;

unless (-d 'socialtext') {
    my $old = -l 'current' ? readlink('current') : 'master';
    if (-d $old) {
        warn color('red') . "Warning:". color('reset')
            . " I'm moving the socialtext repo to live at $src_base/socialtext\n";
        warn "We no longer put this repository in the name of the branch.\n";
        shell_run(qq{mv $old socialtext});
        shell_run(qq{ln -sf socialtext current});
    }
    else {
        clone_master();
    }
}

# make sure that we've got the sub repos set up
foreach my $repo (@repos) {
    next if $repo eq 'socialtext';
    clone_repo($repo) unless -d repo_git_dir($repo);
}

if ($offline) {
    color_print('yellow', "Offline mode: Not fetching changes from GitHub\n");
}
else {
    color_print('blue', "Fetching changes from GitHub\n");
    git_all('-fetch');
}

assert_branch_exists($branch);

color_print('blue', "Stashing local modifications on your current branch\n");
git_all(qq{\@stash save 'auto-stash for set-branch'});

foreach my $repo (@repos) {
    color_print('blue', "Setting working copy of $repo to $branch\n");
    checkout_branch($repo, $branch);
}

color_print('blue', 
            "Re-applying previously stashed modifications for $branch\n");
foreach my $repo (@repos) {
    my $repo_dir = repo_dir($repo);
    chdir $repo_dir;

    my $latest = first { /On \Q$branch\E: auto-stash/ } `git stash list`;
    next unless $latest;
    $latest =~ s/:.+//s;

    my $rc = shell_run(qq{-git stash apply --index $latest >/dev/null});
    if ($rc) {
        color_print('red', "Failed to apply auto-stash $latest in $repo;".
                           "inspect manually\n");
    }
    else {
        shell_run(qq{git stash drop $latest >/dev/null});
    }
}

chdir "$src_base/socialtext/nlw";
color_print('green', "Done!\n");

exit;

sub assert_branch_exists {
    # check if the branch exists, exit if not
    unless (branch_exists($branch) || remote_branch_exists($branch) || tag_exists($branch)) {
        color_print('red',
            "Couldn't find a local or upstream branch, '$branch'");
        exit 1;
    }
}

sub remote_branch_exists {
    my $branch = shift;
    return branch_exists("origin/$branch");
}

sub branch_exists {
    my $branch = shift;
    my $dir = shift || "$src_base/socialtext";
    my $exists = grep { $_ =~ /\s\Q$branch\E\s*/ } `cd $dir ; git branch -a`;
    return $exists ? 1 : 0;
}

sub tag_exists {
    my $branch = shift;
    my $dir = shift || "$src_base/socialtext";
    my $exists = grep { $_ =~ /\Q$branch\E\s*/ } `cd $dir ; git tag`;
    $Is_tag = $exists;
    return $exists ? 1 : 0;
}

sub git_all {
    my $cmd = shift;
    shell_run("st-git-all $cmd");
}

sub shell_run {
    my $cmd = shift;
    my $nodie = $cmd =~ s/^-//;
    warn "+ $cmd\n" if $cmd =~ m/git/;
    my $rc = system $cmd;
    unless ($rc == 0) {
        color_print('red', "Error running $cmd\n");
        exit $rc unless $nodie;
    }
    return $rc == 0;
}

sub num_to_name {
    my $num = shift;
    my @branches = branch_list();
    $num--; # was 1 based
    return $branches[$num];
}

sub usage {
    my $i = 1;
    my @branches = map { sprintf('  %2d - %s', $i++, $_) } branch_list();
    
    local $LIST_SEPARATOR = "\n";
    die <<EOT;
USAGE: set-branch <branch>

Existing branches:
@branches
EOT
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    chomp $msg;
    print color($color), $msg, color('reset'), "\n";
}

sub branch_list {
    my @branches = `cd $src_base/socialtext; git branch`;
    chomp @branches;
    @branches = sort { 
        (my $aname = $a) =~ s/^..//;
        (my $bname = $b) =~ s/^..//;
        return $aname cmp $bname;
    } @branches;
    s/^\s+// for @branches;
    return @branches;
}

sub clone_repo {
    my $repo = shift;
    my $dir = repo_dir($repo);

    if ($offline) {
        color_print('red', "can't clone from GitHub under --offline mode");
        exit 1;
    }

    color_print('blue', "Cloning $repo from GitHub to $dir");
    shell_run(qq{git clone $git_base/$repo.git $dir});
}

sub repo_dir {
    my $repo = shift;
    return "$src_base/socialtext" if ($repo eq 'socialtext');
    return "$src_base/socialtext/$repo";
}

sub repo_git_dir {
    return repo_dir(shift) . '/.git';
}

sub checkout_branch {
    my $repo = shift;
    my $branch = shift;

    my $force = ($overwrite) ? '-f' : '';

    my $repo_dir = repo_dir($repo);
    chdir $repo_dir;
    my $origin_branch = $Is_tag ? $branch : "origin/$branch";
    if (!-f repo_git_dir($repo)."/refs/heads/$branch") {
        color_print('yellow', "... Mapping $branch to $origin_branch\n");
        shell_run(qq{git checkout $force -q --track -b $branch $origin_branch});
    }
    else {
        shell_run(qq{-git checkout $force -q $branch}) or
            color_print('blue', 
                "Conflicting files? try --overwrite or fix it yourself");
    }
    chdir $src_base;
}

sub clone_master {
    color_print('blue', "Setting up master repo from GitHub...");

    clone_repo('socialtext');
    shell_run(qq{ln -sf socialtext current});

    if ($branch ne 'master') {
        assert_branch_exists($branch);
        checkout_branch('socialtext', $branch);
    }
}
