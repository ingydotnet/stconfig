#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor 'color';
use File::Path qw/mkpath/;
use Fatal qw/:void mkpath chdir unlink symlink/;
use English;
use List::Util qw(first);

my $branch = shift || '';

if ($branch eq 'trunk') {
    warn color('red') . "Warning:". color('reset')
        . " you are attempting to use the deprecated 'trunk' branch.\n";
    warn "In the future use 'master'. Substituting 'master' for 'trunk'.\n\n";
    $branch = 'master';
}

my $git_base = $ENV{ST_GIT};
my $src_base = $ENV{ST_SRC_BASE};
unless (-d $src_base) {
    mkpath $src_base;
}
my @repos = (split /\s+/,`st-repo-list`);
chomp @repos;

$branch = num_to_name($branch) if $branch =~ m/^\d+$/;
usage() unless $branch;
$branch =~ s#^tags/##;

chdir $src_base;
my $current = readlink "$src_base/current";

# create 'current' symlink if it doesn't exist yet
unless ($current) {
    mkdir 'master' unless (-d 'master');
    unlink 'current';
    symlink 'master', 'current';
    $current = readlink "$src_base/current";
}

foreach my $repo (@repos) {
    clone_repo($repo) unless (-d repo_git_dir($repo));
}

(my $current_branch = $current) =~ s#^.+/##;
exit if $current_branch eq $branch;

git_all('fetch');

assert_branch_exists($branch);

git_all(qq{\@stash save 'auto-stash for set-branch'});

if (branch_exists($branch)) {
    # assume we already have a local branch with this name; switch to it
    git_all(qq{\@checkout -q $branch});
}
else {
    # no local branch with this name; create a new one, tracking the remote
    git_all(qq{\@checkout -q --track -b $branch origin/$branch});
}

# move the working directory to its new name
shell_run(qq{mv $current $branch}) if $current;
shell_run(qq{ln -sf $branch current});

$current = "$src_base/$branch";

foreach my $repo (@repos) {
    my $repo_dir = repo_dir($repo);
    chdir $repo_dir;

    my $latest = first { /On \Q$branch\E: auto-stash/ } `git stash list`;
    next unless $latest;
    $latest =~ s/:.+//s;

    my $rc = shell_run(qq{-git stash apply --index $latest >/dev/null});
    if ($rc) {
        color_print('red', "Failed to apply stash $latest; inspect manually");
    }
    else {
        shell_run(qq{git stash drop $latest >/dev/null});
    }
}

chdir $current;

exit;

sub assert_branch_exists {
    # check if the branch exists, exit if not
    unless (branch_exists($branch) || remote_branch_exists($branch)) {
        die color("red")
            . "Couldn't find a local or upstream branch, '$branch'"
            . color("reset") . "\n";
    }
}

sub remote_branch_exists {
    my $branch = shift;
    return branch_exists("origin/$branch");
}

sub branch_exists {
    my $branch = shift;
    my $exists = grep { $_ =~ /\s\Q$branch\E\s*/ } `cd $src_base/current ; git branch -a`;
    return $exists ? 1 : 0;
}

sub git_all {
    my $cmd = shift;
    shell_run("st-git-all $cmd");
}

sub shell_run {
    my $cmd = shift;
    my $nodie = $cmd =~ s/^-//;
    warn "+ $cmd\n" if $cmd =~ m/git/;
    my $rc = system $cmd;
    unless ($rc == 0) {
        color_print('red', "Error running $cmd\n");
        exit $rc unless $nodie;
    }
    return $rc == 0;
}

sub num_to_name {
    my $num = shift;
    my @branches = branch_list();
    $num--; # was 1 based
    return $branches[$num];
}

sub usage {
    my $i = 1;
    my @branches = map { sprintf('  %2d - %s', $i++, $_) } branch_list();
    
    local $LIST_SEPARATOR = "\n";
    die <<EOT;
USAGE: set-branch <branch>

Existing branches:
@branches
EOT
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    print color($color), $msg, color('reset');
}

sub branch_list {
    # cd current; git branch | sort
    # or
    # cd current; git branch -r | sort
    my @branches = `cd $src_base/current; git branch | sort`;
    return @branches;
}

sub clone_repo {
    my $repo = shift;

    my $dir = 'current';
    if ($repo ne 'socialtext') {
        $dir .= "/$repo";
    }

    shell_run(qq{git clone git\@github.com:socialtext/$repo.git $src_base/$dir});
}

sub repo_dir {
    my $repo = shift;
    $repo = '.' if ($repo eq 'socialtext');
    return "$current/$repo";
}

sub repo_git_dir {
    return repo_dir(shift) . '/.git';
}
