#!/usr/bin/perl
use strict;
use warnings;

my $local_ref = `git symbolic-ref -q HEAD 2>/dev/null`;
chomp $local_ref;
die "no current branch?!\n" unless $local_ref;
(my $local_branch = $local_ref) =~ s#refs/heads/##;

my %config = map { 
    chomp; 
    s/branch\.\Q$local_branch\E\.// ? split('=',$_,2) : () 
} `git config --list`;

die "ERROR: local branch $local_branch does not track a remote branch\n"
    unless $config{merge} && $config{remote};

my $remote_ref = $config{merge};
$remote_ref =~ s#/heads/#/remotes/$config{remote}/#;
(my $remote_branch = $remote_ref) =~ s#refs/remotes/##;

#warn "# local branch: $local_branch ($local_ref)\n";
#warn "# remote branch: $remote_branch ($remote_ref)\n";

my $spec = "$remote_branch..$local_branch";

# could instead use the longer spec, but the above is nicer and *usually* does
# the trick (the only case where it doesn't, apparently, is when there's a tag
# and a branch named the same thing.
#my $spec = "$remote_ref..$local_ref";

my @cmd = ($spec, @ARGV);
warn "+ git log ".join(' ', map { "'$_'" } @cmd) . "\n";
exec qw(git log), @cmd;
