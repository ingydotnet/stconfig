#!/usr/bin/env perl
# @COPYRIGHT@

use strict;
use warnings;

use File::Path qw(rmtree);
use Getopt::Long;

my $SVN_REPO = 'https://repo.socialtext.net:8999/svn';

my %opts;
GetOptions(
    'type:s'    => \$opts{type},
    'source:s'  => \$opts{source},
    'message:s' => \$opts{message},
    'version:s' => \$opts{version},
    'help'      => \$opts{help},
) or die "\n";

show_help() if $opts{help};
show_help() unless $opts{type};

die "Do not run this script via sudo"
    unless $>;

###################
# Tag Release
###################
$opts{message} = "\n$opts{message}" if $opts{message};
$opts{message} ||= '';

my $nlw_dir = "$ENV{HOME}/src/st/$opts{source}";
chdir $nlw_dir or die "Can't chdir to $nlw_dir: $!";

my $tag_release = qq(tag-release $opts{source} $opts{type} "$opts{message}" )
                  . ($opts{version} || '');
my $output = qx($tag_release 2>&1);
(my $copy_name = $output) =~ s/^Created tag (\S+) from branch .+/$1/s;
die "Couldn't find the tag name ($output)" unless $copy_name;

my $svn_copy_path = "$SVN_REPO/socialtext/tags/$copy_name";

print "Creating new tag $copy_name\n";

###################
# Export Tag
###################
my $export_path = "/tmp/$$";

print "Exporting $svn_copy_path to $export_path\n";

system( 'svn', '-q', 'export', $svn_copy_path, $export_path );

chdir $export_path . '/nlw';

###################
# Create new repo
###################
system( "ssh", "apt.socialtext.net", "create-repository", $copy_name, "main", "alien" )
    and die "Could not create repository $copy_name";

###################################################
# Export Appliance Build Infastructure in place
# XXX OMG: HACK
###################################################
for my $repo (qw(appliance-bin debian)) {
    system( "svn", "export", "$SVN_REPO/appliance/trunk/$repo", "$repo" )
        and die "Could not export $repo";
}
chdir("share");
mkdir("debian");
mkdir("debian/bin");
chdir("debian/bin");
symlink("../../../dev-bin/regen-aliases","regen-aliases");
symlink("../../../dev-bin/create-db-user","create-db-user");
symlink("../../../dev-bin/create-help-workspace","create-help-workspace");
symlink("../../../build/bin/db-login-test","db-login-test");
symlink("../../../dev-bin/gen-config","gen-config"); 
symlink("../../../dev-bin/setup-postgres-permissions","setup-postgres-permissions"); 

chdir("..");
mkdir("build");
chdir("build");
symlink( "../../../build/templates", "templates" );

chdir("..");
mkdir("migrations");
chdir("migrations");
symlink("../../../dev-bin/migration/update-homepage-is-dashboard", "update-homepage-is-dashboard");
symlink(
    "../../../dev-bin/migration/rename-workspace-navigation-to-announcements-and-links",
    "rename-workspace-navigation-to-announcements-and-links" );
chdir("../../..");

###################
# Build Packages
###################
# create debian packages and upload using brett
my $deb_msg = "$opts{message}\ntag: $copy_name";
system("brett -m '$deb_msg' -A $copy_name");

##########################
# Update staging symlink
##########################
print "Updating link repository staging -> $copy_name\n";
system( "ssh", "apt.socialtext.net", "link-repository", $copy_name, "staging" )
    and die "Could not link repository $copy_name";

sub show_help {
    print <<"EOF";

make-release --type=alpha --source=trunk

 This script accepts the following options:

  --type     The type of tag or branch in the SVN repository which is
             being created or updated.
             This should be one of "alpha", "beta", "release".
             This script will create a tag for the release.

  --source   The name (not path) of the "source" branch.
             If you specify "trunk", it will use trunk.  Otherwise,
             if you give something like "release-1.7.2" it will use
             /branches/release-1.7.2

  --message  Append the provided string to the svn log messages.

  --version  Use this version for the created tag, rather than
             the VERSION in the local checkout.

EOF

    exit;
}
