#!/usr/bin/env perl
use strict;
use warnings;
use Text::VimColor;
use HTML::Entities qw(encode_entities);

my $file   = shift || die "Usage: $0 file [filetype]\n";
my $filetype = shift || "perl";
print vimcolor( $file, $filetype );
exit 0;

sub vimcolor {
    my ( $file, $filetype ) = @_;
    my $text = slurp($file);

    my $vim = Text::VimColor->new(
        string => $text,
        ($filetype ? (filetype => $filetype) : ()),
        vim_options => [ qw( -RXZ -i NONE -u NONE -N ), "+set nomodeline" ]
    );

    my $syntax = $vim->marked;
    my $html = <<'PREAMBLE';
.html
<pre style="background: black; color: white;" class="vim">
<style>
.synComment    { color: #00FFDD }
.synConstant   { color: #FF00FF }
.synIdentifier { color: #008B8B }
.synStatement  { color: gold }
.synPreProc    { color: #FF0000 }
.synType       { color: #00FF00; font-weight: bold }
.synSpecial    { color: #6A5ACD }
.synUnderlined { color: #000000 ; text-decoration: underline }
.synError      { color: #FFFFFF ; background: #FF0000 none }
.synTodo       { color: #0000FF ; background: #FFFF00 none }
</style>
PREAMBLE

    for my $element (@$syntax) {
        my ( $type, $content ) = @$element;
        $content = encode_entities( $content, '<>&"' );
        if ($type) {
            $html .= "<span class=\"syn$type\">$content</span>";
        }
        else {
            $html .= $content;
        }
    }

   return $html . "</pre>\n.html\n";
}

sub slurp {
    my $file = shift;
    open( my $fh, "<", $file ) or die "Could not open ${file}: $!\n";
    my $text = join "", <$fh>;
    close($fh) or die "Could not close ${file}: $!\n";
    return $text;
}
