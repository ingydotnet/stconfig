#!/usr/bin/perl
use strict;
use warnings;
use Socialtext::Resting::Getopt qw/get_rester/;
use lib "$ENV{HOME}/src/st/trunk/nlw/lib";
use Socialtext::System qw/shell_run/;
use Getopt::Long;

my $socialtext_svk_mirror = "//mirror/socialtext";
my $socialtext_svn_repo   = "https://repo.socialtext.net:8999/svn/socialtext";

my $r = get_rester();

my %opts;
GetOptions( \%opts,
    'no-rc',
    'from=s',
) or usage();

my $from = 'trunk';
if ($opts{from} =~ m/^tags\/.+/) {
    $from = $opts{from};
}
elsif ($opts{from}) {
    $from = "branches/$opts{from}";
}

my $new_branch = shift;
usage() unless $new_branch;

sync_mirror();

# Check that the branch doesn't exist already
my $branch_path = "${socialtext_svk_mirror}/branches/$new_branch";
unless (qx(svk ls $branch_path 2>&1) =~ m/is not versioned/) {
    die "It appears $branch_path already exists...\n";
}

# use svn to actually make branch because some of our partners have
# to maintain separate mirrors, one for branches, one for tags
my $make_branch_command =
  "svn cp ${socialtext_svn_repo}/$from ${socialtext_svn_repo}/branches/$new_branch";
shell_run($make_branch_command);

# sync again
sync_mirror();
# then checking it out,
shell_run("svk co $branch_path ~/src/st/$new_branch");

# then adding it to testrunner (maybe not required),
# -- not supported yet --

# writing a release contract,
unless ($opts{'no-rc'}) {
    print "Creating a new release contract.\n";
    $r->server('https://www2.socialtext.net');
    $r->workspace('dev-tasks');
    my $rc_template_page = 'Release Contract Template';
    my $rc_template = $r->get_page($rc_template_page);
    my @rc_tags = $r->get_pagetags($rc_template_page);
    my $new_rc_page = "$new_branch Release Contract";
    $r->put_page($new_rc_page, $rc_template);
    $r->put_pagetag($new_rc_page, $_) for @rc_tags;

    shell_run("wikedit -s '" . $r->server
            . "' -w '" . $r->workspace
            . "' '$new_rc_page'" );
}

shell_run("set-branch $new_branch");
exit;

sub sync_mirror {
    shell_run("svk sync $socialtext_svk_mirror");
}

sub usage {
    die <<EOT;
$0 [rester options] [options] new-branch-name

options:
  --no-rc   Don't create a release contract
  --from    Branch to copy from (Default: trunk)
EOT
}
