#!/usr/bin/perl
use strict;
use warnings;
use Term::ANSIColor;
use lib "$ENV{ST_SRC_BASE}/current/nlw/lib";
use Socialtext::System qw/shell_run/;
use Getopt::Long;


my %opts;
GetOptions( \%opts,
    'repo=s',
    'force',
) or usage();

$opts{repo} ||= 'all';

my %repo_names = map { $_ => 1 } split /\s+/, qx(st-repo-list);
$opts{repo} = join(',', keys %repo_names) if $opts{repo} =~ m/^all$/i;
my @repos = split ',', $opts{repo};
for my $r (@repos) {
    usage("$r is not a valid repository") unless $repo_names{$r};
}

my $branch = shift;
usage() unless $branch;
my $svn_prefix = 'branches/';
$svn_prefix = 'tags/' if $branch =~ s#^tags/##;

shell_run("refresh-branch --quiet trunk");
shell_run("refresh-branch --quiet $branch");

my $svk_mirror_base = '//mirror';
for my $repo (@repos) {
    # Check that the branch exists already
    my $branch_path = "${svk_mirror_base}/$repo/$svn_prefix$branch";
    if (qx(svk ls $branch_path 2>&1) =~ m/is not versioned/) {
        color_print('red bold', "It appears $branch_path doesn't exist...\n");
        next if $opts{force};
        exit -1;
    }

    color_print('magenta', "Test smerging $branch to trunk - $repo\n");
    my $trunk_path = "${svk_mirror_base}/$repo/trunk";
    my $smerge_cmd = "svk smerge -m 'smerge $branch to trunk' --log "
                     . "$branch_path $trunk_path";
    my $output = qx($smerge_cmd --check-only);
    if ($output =~ m/conflicts? found/) {
        color_print('red', "Conflict found merging $branch to trunk in $repo\n");
        unless ($opts{force}) {
            color_print('red', "Please fix this, either by merging trunk up into this branch,\n"
                             . "or run this command with --force to solve merge conflicts yourself!\n");
            exit;
        }
    }

    color_print('magenta', "Smerging $branch to trunk - $repo FOR REAL\n");
    shell_run($smerge_cmd);
}

shell_run("refresh-branch --quiet trunk");

color_print('bold green', "\nAll done smerging $branch!\n");
exit;


sub usage {
    my $msg = shift || '';
    my $valid_repos = join(',', keys %repo_names);
    color_print('bold red', $msg);
    color_print('yellow', <<EOT);

$0 [options] branch

Use SVK to smerge the specified branch to trunk for all of the Socialtext
subversion repositories.

options:
  --repo    The repositories to create the branch in:
            $valid_repos OR all
EOT
    exit -1;
}

sub color_print {
    my $color = shift;
    my $msg = shift;
    print color($color), $msg, color('reset');
}
