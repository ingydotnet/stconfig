#!/usr/bin/env perl
use strict;
use warnings;
use Cwd;

my $src_base = $ENV{ST_SRC_BASE} || "$ENV{HOME}/src/st";

chomp(my $scm = `which svk 2>/dev/null`);
if ( -e "$ENV{HOME}/.svk" and $scm ) {
    $scm = 'svk';
}
else {
    $scm = 'svn';
}

my %default_env = (
    ST_SRC_BASE       => $src_base,
    ST_CURRENT        => "$src_base/socialtext",
    SVN_COMMAND       => $scm,
    NLW_TEST_FASTER   => '1',
    ST_HAXORS         => get_haxors(),
    LANG              => 'en_US.utf-8',
    LESSCHARSET       => 'utf-8',
    REMOTE_USER       => 'devnull1@socialtext.com',
    EDITOR            => 'vim',
    VISUAL            => 'vim',
    TEST_LESS_COMMENT => '\'$d -- $u\'',
    COLOR             => '32',
    SCREENCOLOR       => 'g',
    WW                => 'base/javascript/Wikiwyg',
    SF_CODE_REPO      => 'https://svn.sourceforge.net/svnroot/socialtext',
    ST_CODE_REPO      => 'https://repo.socialtext.net:8999/svn/socialtext',
    ST_SVN            => 'https://repo.socialtext.net:8999/svn',
    ST_GIT            => 'git@github.com:socialtext',
    STB               => '//mirror/socialtext/branches',
    STT               => '//mirror/socialtext/tags',
);

$default_env{LD_LIBRARY_PATH} = '/usr/lib/debug:$LD_LIBRARY_PATH'
  if -e '/usr/lib/debug';

for my $name (keys %default_env) {
    print "export $name=$default_env{$name};"
      unless $ENV{$name} and $name ne 'PATH';
}

# path is special because it depends on $ST_MASTER, and is an array, so it fits
# better outside the above loop.
if ($ENV{PATH} !~ /stdefaultenv-done/) {
    printf "export PATH=%s; ", join ':', qw(
      ~/stbin
      ~/bin
      ~/local/bin
      /opt/vim/bin
      /usr/local/bin
      $ST_CURRENT/nlw/bin
      $ST_CURRENT/nlw/dev-bin
      $ST_MASTER/nlw/bin
      $ST_MASTER/nlw/dev-bin
      $PATH
      /.stdefaultenv-done
    );
}
make_current_link();

sub get_haxors {
    my $file = "$ENV{HOME}/.st-haxors";
    -e $file
        ? join ',', map { chomp; $_ } slurp($file)
        : ''
}

sub slurp {
    my $file = shift;
    open my $fh, $file or die "Could not open $file: $!\n";
    return <$fh>;
}

# If the $ST_SRC_BASE/current symlink doesn't exist then create it and guess a
# branch for it to point to.
sub make_current_link {
    my $current = Cwd::abs_path("$src_base") . "/current";
    if ( -d $src_base and not -l $current and not -e _ ) {
        opendir( DIR, $src_base ) or return;
        my @dirs = grep { -d "$_/nlw/dev-bin" }
                   grep { -d $_ and $_ !~ /\.{1,2}$/ }
                   map {"$src_base/$_"} readdir(DIR);

        # Try and guess a branch for current to initially point to.
        my $source;
        if ( @dirs == 1 ) {
            $source = $dirs[0];
        }
        elsif ( grep m{/master$}, @dirs ) {
            $source = "$src_base/master";
        }
        elsif (@dirs) {
            $source = ( sort @dirs )[0];
        }
        else {
            $source = "$src_base/master";
        }
        symlink($source, $current)
            or warn "Could not make symlink $current to $source\n";
    }
}
