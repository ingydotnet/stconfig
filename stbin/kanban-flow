#!/usr/bin/perl
use strict;
use warnings;
use Socialtext::Resting::Getopt qw/get_rester/;
use DateTime;
use Data::Dumper;

$| = 1;

my $r = get_rester(workspace => 'dev-tasks');
my $tag = shift || 'allyourbase' or die <<EOT;
USAGE: $0 <release>
EOT
my $report_page = shift;
my $DEBUG = 0;

sub say ($);

my @state_order = qw/productmanagementpool inprep ready indev inqa awaitingsignoff/;
my %state_tags = (
    productmanagementpool => 'p',
    inprep => 'P',
    ready => 'R',
    indev => 'D',
    inqa => 'Q',
    awaitingsignoff => 'S',
);

$r->accept('perl_hash');

my @stories;
for my $story (@{ $r->get_taggedpages($tag) }) {
    $story->{tags} = { map { lc($_) => 1 } @{ $story->{tags} } };
    next unless $story->{tags}{story};

    print "$story->{name}: ";
    $story->{revisions} = $r->get_revisions($story->{page_id});
    my %state;
    for my $rev (@{ $story->{revisions} } ) {
        print '.';
        $rev->{tags} = { map { lc($_) => 1 } @{ $rev->{tags} } };
        my $rev_ts = $rev->{dt} = revision_id_to_datetime($rev->{revision_id});

        # Look through all the keys in this revision to see if they put us in
        # a new state.
        for my $tag (keys %{ $rev->{tags} }) {
            next unless $state_tags{$tag}; # the tag is a valid Kanban State Name
            next if $state{$tag}{start}; # the state has been started
            $state{$tag}{start} = $rev_ts;
            print '+' . $state_tags{$tag};
            $state{last_started_state} = $tag;
            $state{first_entered_kanban} ||= $rev_ts;
        }

        # Now look through all the tags we already had to see if any aren't in
        # the current revision, indicating we've left state.
        for my $tag (keys %state) {
            next if $rev->{tags}{$tag}; # tag is still there
            next unless $state_tags{$tag};
            next unless defined $state{$tag}{start}; # 
            my $l = $state{$tag}{last} = {
                started_at => $state{$tag}{start},
                finished_at => $rev_ts,
            };
            push @{ $state{$tag}{finishes} }, $l;
            $state{$tag}{first_start} ||= delete $state{$tag}{start};
            print '-' . $state_tags{$tag};
        }
    }

    # See what the current cumulative state is
    $state{current} = [];
    for my $tag (@state_order) {
        next unless exists $state{$tag};
        next if $state{$tag}{done};
        push @{ $state{current} }, $tag;
        my $started_at = $state{$tag}{start} || $state{$tag}{first_start}
            or die "Started_at is undef! ($tag)";
        my $l = $state{$tag}{last} = {
            started_at => $started_at,
            finished_at => DateTime->now,
        };
        push @{ $state{$tag}{finishes} }, $l;
        $state{left_kanban} = $l->{finished_at};
    }

    # Look for any stories that are "done done", and then calculate stats
    # about how long each phase took
    if (my $done = $state{awaitingsignoff}{last}) {
        my $done_ts = $done->{finished_at};
        $state{left_kanban} = $done_ts;
        # story is "finished"
        for my $tag (@state_order) {
            if (my $start_ts = $state{$tag}{first_start}) {
                $state{summary}{$tag} = {
                    start => $start_ts,
                    done_done => $done_ts,
                };
            }
            else {
                $state{summary}{$tag} = { skipped => 1 };
            }
        }
    }
    $story->{state} = \%state;
    push @stories, $story;
    print "\n";
}


say "Metrics for stories tagged: $tag\n";

if (my @current_stories = grep { !defined $_->{state}{summary} } @stories) {
    say "^^ Current Stories\n";
    say "| *Story* | *PMPool* | *InPrep* | *Ready* | *Dev* | *QA* | *Signoff* | *Total* |";
    for my $s (@current_stories) {
        my $line = "| [$s->{name}] |";
        for my $tag (@state_order) {
            my $last = $s->{state}{$tag}{last};
            my $bold = $s->{state}{last_started_state} eq $tag ? '*' : '';
            if ($last) {
                my $duration = duration_to_string($last->{started_at}, $last->{finished_at});
                $line .= " $bold$duration$bold |"
            }
            else {
                $line .= " |";
            }
        }
        my $total = duration_to_string($s->{state}{first_entered_kanban} => $s->{state}{left_kanban});
        $line .= " $total |";
        say $line;
    }
    say '';
}

if (my @done_stories = grep { $_->{state}{summary} } @stories) {
    say "^^ Done Stories\n";
    say "| *Story* | *PMPool* | *InPrep* | *Ready* | *Dev* | *QA* | *Signoff* | *Total* |";
    for my $s (@done_stories) {
        my $line = "| [$s->{name}] |";
        my $summary = $s->{state}{summary};
        for my $tag (@state_order) {
            my $tag_state = $summary->{$tag};
            if ($tag_state->{done_done}) {
                my $d = duration_to_string($tag_state->{start}, $tag_state->{done_done});
                $line .= " $d |"
            }
            else {
                $line .= " |";
            }
        }
        my $total = duration_to_string($s->{state}{first_entered_kanban} => $s->{state}{left_kanban});
        $line .= " $total |";
        say $line;
    }
    say '';
}

if ($report_page) {
    print "Putting " . $r->server . '/' . $r->workspace . "/?$report_page ...\n";
    $r->put_page($report_page, page_content());
}

exit;

sub revision_id_to_datetime {
    my $rev_id = shift;

    $rev_id =~ m/^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})$/;
    return DateTime->new(
        year => $1, month => $2, day => $3,
        hour => $4, minute => $5, second => $6,
    );
}

sub duration_to_string {
    my $start = shift;
    my $stop  = shift;
    my $start_epoch = $start->epoch;
    my $stop_epoch  = $stop->epoch;
    my $seconds = $stop_epoch - $start_epoch;

    my $hour = 60 * 60;
    if ($seconds < $hour) {
        my $minutes = 0;
        while ($seconds > 60) { $seconds -= 60; $minutes++ }
        return "$minutes minutes";
    }
    elsif ($seconds < $hour * 40) {
        my $hours = 0;
        while ($seconds > $hour) { $seconds -= $hour; $hours++ }
        return "$hours hours";
    }
    else {
        my $days = 0;
        my $day = $hour * 24;
        while ($seconds > $day) { $seconds -= $day; $days++ }
        return "$days days";
    }
}

{
    my $page_content;
    sub say ($) {
        my $msg = shift;
        print "$msg\n";
        if ($report_page) {
            $page_content ||= "This page is auto-generated.  Comments and changes will be lost.\n\n";
            $page_content .= "$msg\n";
        }
    }

    sub page_content { $page_content }
}

