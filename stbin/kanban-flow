#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use Socialtext::Resting::Getopt qw/get_rester/;
use DateTime;
use Data::Dumper;
use Storable ();
use List::Util qw/sum max min reduce shuffle/;
use List::MoreUtils qw/:all/;
use Array::Heap;
use Clone qw/clone/;
use JSON::XS qw(encode_json);
use File::Temp qw/tempfile/;
use IPC::Run qw/run/;
use Date::Parse qw/str2time/;

# for using arrays-as-struct
use constant Start => 0;
use constant End   => 1;
use constant Tags  => 2;
use constant future => 0x7fffffff;

our @getopt_args;

$| = 1;

our $r;

# process resting opts first.
$r = get_rester(workspace => 'dev-tasks');
$r->accept('perl_hash');

our %opts = (
    report => [],
    json   => [],
    cache  => 1,
    sot    => 1,
    start  => 0,
);
GetOptions(\%opts,
    'cache!', 'simple-table!', 'json=s@', 'report=s@', 'sot!', 'spark!',
    'at=s', 'start=s'
) or usage();

my $rel_tag = $opts{release} || shift || 'chocolaterain' or usage();

sub usage {
    die <<EOT;
USAGE: $0 (options) releasetag
Options:
    --no-cache      Don't use a disk cache for page history. (default: on)
    --release=X     Use this release tag.
    --report=X      Generate the specified report (can have many)
    --json=X        Output the specified JSON blob.
    --no-sot        Don't use 8AM PST/PDT as "now" (the default).
    --at=X          The time to consider as "now" (overrides SOT 8AM default)

Partially implemented options:
    --start=X       The time to start counting from (default epoch-0)
                    (Only works for --json=flot-cfd)

Reports:
    simple      a wiki table with cumulative times for each story-state,
                "sparklines" for each story.
    standup     a wiki table for stories currently InDev, InQA, and
                AwaitingSignoff, for highlight during standups.

JSON exports:
    flot-cfd    data for a flot.js-based release CFD.
EOT
}

$opts{report} = { map {$_=>1} @{$opts{report}} };
$opts{json} = { map {$_=>1} @{$opts{json}} };

unless (%{$opts{report}} or %{$opts{json}}) {
    $opts{report}{simple} = 1;
}

sub say ($);

my @state_order =
    qw/productmanagementpool inprep ready indev inqa awaitingsignoff done/;

my %state_precedence;
{
    my $i = 1;
    %state_precedence = map { $_ => $i++ } @state_order;
}

my %state_alias = (
    signedoff => 'done'
);
my %state_tags = (
    productmanagementpool => 'p',
    inprep                => 'P',
    ready                 => 'R',
    indev                 => 'D',
    inqa                  => 'Q',
    awaitingsignoff       => 'S',
    done                  => '$',
);
my %state_display = (
    productmanagementpool => 'PMPool',
    inprep                => 'InPrep',
    ready                 => 'Ready',
    indev                 => 'InDev',
    inqa                  => 'InQA',
    awaitingsignoff       => 'Signoff',
    done                  => 'Done',
);

our ($pages, $stories, $now, $now_epoch, $start_epoch);

$now_epoch = $opts{at} ? str2time($opts{at}) : time();
$now = DateTime->from_epoch(epoch => $now_epoch, time_zone => 'America/Vancouver');
if ($opts{sot} && !$opts{at}) {
    # use 8AM SOT as the current time.
    $now->set(hour => 8, minute => 0, second => 0);
    $now_epoch = $now->epoch;
}

$start_epoch = $opts{start} ? str2time($opts{start}) : 0;

$pages = load_pages();
$stories = extract_stories_from_page_list();

if ($opts{json}{'flot-cfd'}) {
    my $slices = cumulative_flow_data();
    my $cfd = flot_cfd_struct($slices);
    export_cfd_json($cfd);
}

if ($opts{report}{simple}) {
    simple_table();
}
if ($opts{report}{standup}) {
    standup_table();
}

export_to_page($opts{'report-page'})
    if $opts{'report-page'};

exit 0;

sub summarize_revs {
    my $story = shift;

    my @revs;
    for my $history (@{$story->{tag_history}}) {
        my ($rev_id, $rev_date, $tags) =
            @$history{qw(revision_id revision_date tags)};
        $tags = {
            map { $_=>1 }
            grep { $state_tags{$_} }
            map { my $x = $state_alias{$_}; $x ? $x : $_ }
            map { lc($_) }
            @$tags
        };

        # make "doubly-tagged" an invalid (empty) state
        my ($state) = (keys %$tags == 1) ? (keys %$tags) : ('');
        my $at = str2time($rev_date);
        die "unable to parse $rev_date" unless defined $at;
        push @revs, {
            tags  => $tags,
            at    => str2time($rev_date),
            state => $state,
        };
    }

    @revs = sort { $a->{at} <=> $b->{at} } @revs;

    my @de_duped;
    push @de_duped, shift @revs;

    # De-duplicate states
    while (my $rev = shift @revs) {
        my $last = $de_duped[-1];

        # ignore states after "now" (the max time we're considering)
        next if $rev->{at} > $now_epoch;

        if ($rev->{state} ne $last->{state}) {
            push @de_duped, $rev;
        }
    }

    my @state_flow;
    if (@de_duped < 3) {
        @state_flow = @de_duped;
        @de_duped = ();
    }
    else {
        # get rid of internal "empty" states
        # e.g. transitions that look like: A => '' => B
        # slide a window over the results [...,$m1,$m2,$m3,...]
        my $m1 = shift @de_duped;
        my $m2 = shift @de_duped;
        my $m3 = shift @de_duped;
        do {
#             warn "$m1->{state} $m2->{state} $m3->{state}\n";
            if (!$m1->{state}) {
                push @state_flow, $m1;
                $m1 = $m2;
                $m2 = $m3;
                $m3 = shift @de_duped;
            }
            elsif (!$m2->{state}) {
                # drop m2
                $m2 = $m3;
                $m3 = shift @de_duped;
            }
            else {
                push @state_flow, $m1;
                push @state_flow, $m2;
                $m1 = $m3;
                $m2 = shift @de_duped;
                $m3 = shift @de_duped;
            }
        } until (@de_duped == 0);
        push @state_flow, $m1;
        push @state_flow, $m2;
        push @state_flow, $m3 if $m3;
    }

    # calculate state durations
    for (my $i=0; $i < $#state_flow; $i++) {
        $state_flow[$i]{dur} = $state_flow[$i+1]{at} - $state_flow[$i]{at};
    }
    # extend the last state to "now"
    $state_flow[-1]{dur} += ($now_epoch - $state_flow[-1]{at});

    my %total_per_state;
    for my $t (@state_order) {
        $total_per_state{$t} =
            sum map { $_->{dur} }
            grep { $_->{state} eq $t } # ignore invalid states
            @state_flow;
        delete $total_per_state{$t} unless $total_per_state{$t};
    }
    $total_per_state{other} = 
            sum map { $_->{dur} }
            grep { $_->{state} eq '' }
            @state_flow;

    my (%first, %last);
    my (%before_dur, %after_dur);
    for my $t (@state_order) {
        $first{$t} = firstidx { $_->{tags}{$t} } @state_flow;
        $last{$t}  =  lastidx { $_->{tags}{$t} } @state_flow;
        delete $first{$t} if $first{$t} == -1;
        delete $last{$t} if $last{$t} == -1;

        my ($before, $after);
        if ($first{$t}) {
            # duration before first tag instance
            $before_dur{$t} += $_->{dur}
                for @state_flow[0 .. $first{$t}-1];
        }
        if ($last{$t} && $last{$t} < $#state_flow) {
            # duration after last tag instance
            $after_dur{$t} += $_->{dur}
                for @state_flow[$last{$t}+1 .. $#state_flow];
        }
    }

    my $story_age = $now_epoch - $state_flow[0]{at};

    return {
        states => \@state_flow,
        first_idx => \%first,
        last_idx => \%last,
        dur_before_first => \%before_dur,
        dur_after_last => \%after_dur,
        total_per_state => \%total_per_state,
        age => $story_age,
    };
}

sub revision_id_to_datetime {
    my $rev_id = shift;

    $rev_id =~ m/^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})$/;
    return DateTime->new(
        year => $1, month => $2, day => $3,
        hour => $4, minute => $5, second => $6,
    );
}

sub delta_to_string {
    my $seconds = shift;
    if ($seconds < 3600) {
        my $minutes =  int($seconds / 60);
        return "0" if $minutes == 0;
        return "$minutes m";
    }
    elsif ($seconds < 3600 * (48+6)) {
        my $hours = int($seconds / 3600);
        return "$hours h";
    }
    else {
        my $days = sprintf('%0.1f', $seconds / 86400);
        return "$days d";
    }
}

sub _heapify_story_intervals {
    my $heap = shift;

    for my $story (@$stories) {
        my $page_id = $story->{page_id};
        my @elems;
        for my $interval (@{$story->{stats}{states}}) {
            my $start = $interval->{at};
            my $end = $start + ($interval->{dur}||1) - 1;
            my %tags = map {
                $_ => { $page_id => 1}
            } keys %{$interval->{tags}};
            my $elem = [$start,$end,\%tags];
            push @elems, $elem;
            push_heap @$heap, $elem;
        }
        # make the last element end far in the future.
        $elems[-1][End] = future;
    }
}

# Convert a heapified set of story-intervals into an ordered sequence of
# slices suitable for generating cumulative-flow and or gant-chart-like
# information.  In theory, the data structure is updatable and could be used
# for time-window searching.
#
# Output is a list of discrete start-end-tags triplets in
# monitonically-increasing order by epoch timestamps.  The last element will
# have an end-time set to 0x7fffffff.  Each tag will have a hash of page_ids
# that have that tag in the interval.  So, for cumulative flow, count the
# number of pages associated with each tag.  A page missing from tags means
# hasn't entered the kanban yet.  The '' tag means its also not on the kanban.
#
# [
#   [12, 34, { foo => {story_a=>1, story_b=>1}                     }],
#   [35, 70, { foo => {story_b=>1},            bar => {story_a=>1} }],
#   [71, 75, { bar => {story_a=>1, story_b=>1}                     }],
#   [76, 80, { bar => {story_a=>1, story_b=>1}                     }],
#   [81, 85, { bar => {story_b=>1},            '' => {story_a=>1}  }],
#   [86, 0x7fffffff, { '' => {story_a=>1, story_b=>1} }],
# ]
#
# It's a bit hard to explain what's going on in the algorithm below, so i've
# used ASCII-art to illustrate.  Picture a timeline going from left to right.
# When the letters are above each other, that means they both occupy that
# slice of time.

sub cumulative_flow_data {
    my @heap;

    _heapify_story_intervals(\@heap);

    my @slices;
    my $cur = pop_heap @heap;
    my $next = $heap[0];
    while ($next) {
        # A is '$cur', B is '$next' and C is a merger of the two.  Dots mean a
        # continuation of some interval.
        if ($cur->[Start] == $next->[Start]) {
            # Case 1
            # AA......
            # BB.....
            if ($cur->[End] != $next->[End]) {
                if ($cur->[End] < $next->[End]) {
                    # Case 1b reduces to mirror of 1c
                    # AA       BBBB
                    # BBBB --> AA  
                    # CCBB     CCBB
#                     diag "1b swapping cur and next";
                    my $tmp = $next;
                    $next = $cur;
                    $cur = $tmp;
                }
                # Case 1c reduces to 1a if we split cur
                # AAAA     AAaa
                # BB   --> BB
                # CCAA     CCaa
#                 diag "1c splitting cur";
                my $new = [@$cur]; # shallow copy
                $new->[Start] = $next->[End]+1;
                $cur->[End] = $next->[End];
                push_heap @heap, $new;
            }

            # Case 1a
            # AA
            # BB
            # CC
#             diag "1a equal intervals";
            # merge: sum tag counts, union name set
            $cur->[Tags] = clone $cur->[Tags];
            for my $tag (keys %{$next->[Tags]}) {
                for my $name (keys %{$next->[Tags]{$tag}}) {
                    $cur->[Tags]{$tag}{$name} = 1;
                }
            }
            $next = pop_heap @heap;
        }
        else { # $cur->[Start] < $next->[Start] is implied
            # case 2
            # AA......
            #   BB.....
            if ($cur->[End] < $next->[Start]) {
                # Case 2a
                # AA     
                #   BB.....
#                 diag '2a no overlap';
#                 diag YAML::Dump($cur);
                push @slices, $cur;
                $cur = $next;
                $next = pop_heap @heap;
            }
            else {
                # Case 2b: reduction to Case 1a/1b
                # AAAA          aaAA
                #   BBB.... -->   BBB...
                # AACCB....     aaCCB...

                # Peel off the interval before the overlap (aa) and add that
                # to the results. Shorten the current (AA) and go to the next
                # loop which will hit Case 1
#                 diag "2b peeling off copy of cur";
                my $new = [@$cur];
                $new->[End] = $next->[Start]-1;
                $cur->[Start] = $next->[Start];
#                 diag YAML::Dump($new);
                push @slices, $new;
            }
        }
    }
#     diag YAML::Dump($cur);
    # last item doesn't overlap with anything, so just add it.
    push @slices, $cur;

    return \@slices;
}

sub flot_cfd_struct {
    my $slices = shift;
    #
    # var datasets = {
    #   "usa": {
    #     "label":"USA",
    #     "data":[ ... [x,y] ... ]
    #   }
    # };

    my $cur_time = max $start_epoch, $slices->[0][Start];
    my $end_time = $slices->[-1][End];

    my $halfday = DateTime::Duration->new(hours => 12);

    # start at 8AM SOT of the date of the first slice
    my $dt = DateTime->from_epoch(
        epoch => $cur_time, time_zone => 'America/Vancouver');
    $dt->set(hour => 8, minute => 0, second => 0);
    $cur_time = $dt->epoch;

    my %data = map {$_ => []} @state_order;
    my $i = 0;
    while ($cur_time < $end_time) {
        # find the slice containing the current time
        while (defined $slices->[$i] and $slices->[$i][Start] < $cur_time) {
            $i++;
        }
        last unless defined $slices->[$i];

        # get a total for each state
        my $slice = $slices->[$i];
        my $x = $cur_time . '000'; # sec to msec
        for my $tag (@state_order) {
            my $y = keys %{$slice->[Tags]{$tag}};
            push @{$data{$tag}}, [$x,$y];
        }

        $dt = $dt + $halfday;
        if ($dt->hour == 7 || $dt->hour == 9) {
            # DST changed
            $dt->set_hour(8);
        }
        $cur_time = $dt->epoch;
    }

    my %datasets = map {
        $_ => { label => $state_display{$_}, data => $data{$_} }
    } @state_order;
    return \%datasets;
}

sub fix_tables (\$) {
    my $input_ref = shift;
    die "not a ref!" unless ref($input_ref);
    my $pretty = '';
    run(['fix-tables'], $input_ref, \$pretty, undef);
    return $pretty;
}

{
    my $page_content;
    sub say ($) {
        my $msg = shift;
        print "$msg\n";
        if ($opts{'report-page'}) {
            $page_content ||= "This page is auto-generated.  Comments and changes will be lost.\n\n";
            $page_content .= "$msg\n";
        }
    }

    sub page_content { $page_content }
}

sub load_pages {
    my $pages;
    my $cachefile = "cache-$rel_tag.sto";
    unlink $cachefile unless $opts{cache};
    if (-e $cachefile) {
        $pages = Storable::retrieve($cachefile);
    }
    else {
        my $tmp_pages = $r->get_taggedpages($rel_tag);
        $pages = [];
        for my $page (shuffle @$tmp_pages) {
            $page->{tags} = { map { lc($_) => 1 } @{$page->{tags}||[]} };
            next unless $page->{tags}{story};
            $page->{tag_history} = $r->get_taghistory($page->{page_id});
            push @$pages, $page;
        }
        Storable::store($pages => $cachefile);
    }
    return $pages;
}

sub extract_stories_from_page_list {
    my @stories;
    for my $story (@$pages) {
        my $info = summarize_revs($story);
        if ($info->{age} <= 0) {
            warn "NOTE: $story->{page_id} is newer than the time cut-off, skipping\n";
            next;
        }

        $info->{spark} = '`' . join('',
            map { $state_tags{$_->{state}} || '-' } @{$info->{states}}) . '`';

        my $done = ($info->{states}[-1]{state} eq 'signedoff' or
                    $info->{states}[-1]{state} eq '' &&
                        $info->{last_idx}{awaitingsignoff});
        $info->{is_done} = $done ? 1 : undef;

        $story->{stats} = $info;
        push @stories, $story;
    }
    return \@stories;
}

sub export_cfd_json {
    my $cfd = shift;
    my $filename = $rel_tag.'-cfd.json';
    open my $fh, '>', $filename;
    print $fh encode_json($cfd);
    close $fh;
    print "Wrote Flot.js CFD JSON to $filename.\n";
}

sub export_to_page {
    my $report_page = shift;
    print "Putting " . $r->server
        . '/' . $r->workspace . "/?$report_page ...\n";
    $r->put_page($report_page, page_content());
}

sub simple_table {
    my $buf = "| *Task* | ";
    $buf .= "*Sparkline* | " if $opts{spark};
    $buf .= join(' | ', map {"*$state_display{$_}*"} @state_order);
    $buf .= " | *Age* |\n";

    for my $story (sort {$b->{stats}{age} <=> $a->{stats}{age}} @$stories) {
        my $info = $story->{stats};
        $buf .= "| [$story->{name}] |";
        $buf .= " $info->{spark} | " if $opts{spark};
        $buf .= " ".delta_to_string($info->{total_per_state}{$_} || 0)." |"
            for @state_order;
        $buf .= " ".delta_to_string($info->{age})." |";
        $buf .= "\n";
    }

    my $pretty = fix_tables $buf;

    say "Cumulative time spent in each state (including evenings and weekends)\n";
    say $pretty;
    say "\n(Sparkline key: p=PMPool, P=InPrep, R=Ready, D=InDev, Q=InQA, S=AwaitingSignoff, dash for all other states)\n" if $opts{spark};
}

sub standup_table {
    my @states = qw(indev inqa awaitingsignoff);

    my $buf = "| *Task* | ";
    $buf .= "*Sparkline* | " if $opts{spark};
    $buf .= join(' | ', map {"*$state_display{$_}*"} @states);
    $buf .= " | *Age* |\n";

    for my $story (sort {$b->{stats}{age} <=> $a->{stats}{age}} @$stories) {
        next if none { $story->{tags}{$_} } @states;

        my $info = $story->{stats};
        $buf .= "| [$story->{name}] |";
        $buf .= " $info->{spark} | " if $opts{spark};
        $buf .= " ".delta_to_string($info->{total_per_state}{$_} || 0)." |"
            for @states;
        $buf .= " ".delta_to_string($info->{age})." |";
        $buf .= "\n";
    }

    my $pretty = fix_tables $buf;

    say "Cumulative time spent in each state as of 8AM (including evenings and weekends)\n";
    say $pretty;
    say "\n(Sparkline key: p=PMPool, P=InPrep, R=Ready, D=InDev, Q=InQA, S=AwaitingSignoff, dash for all other states)\n" if $opts{spark};
}
