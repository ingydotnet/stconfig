#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);
use File::Find::Rule;
use File::Slurp qw(slurp);
use File::Temp qw(tempdir);

my $file = shift;  # Can be empty, will use STDIN

# main
chdir tempdir( CLEANUP => 1 );
diffsplit($file);
my $data = analyze_diffs();
display_report($data);
exit 0;

sub diffsplit {
    my $file = shift;
    system( "diffsplit", "-q", "-s", ".diff", defined($file) ? ($file) : () )
        and die "Could not split diff file.\n";
}

sub analyze_diffs {
    my %data;
    my @files = File::Find::Rule->file->name("*.diff")->in(".");
    for my $file (@files) {
        # Get data for a single .diff file
        my ($size) = ( stat($file) )[7] || 0;
        $data{$file} = {
            size => $size,
            line_count_info($file),
        };

        # Get aggregate numbers
        for my $type ( keys %{ $data{$file} } ) {
            no warnings 'numeric';    # In case there's non-numeric data here
            $data{TOTAL}{$type} += $data{$file}{$type};
        }
    }

    return \%data;
}

sub display_report {
    my $data = shift;
    local $| = 1;  # autoflush STDOUT, so we see output as it processes.
    print "| Size % | Size | Lines | Added Lines | "
        . "Removed Lines | Added-Removed | File |\n";
    for my $file ( sort_files_by_size_desc($data) ) {
        next if $file eq 'TOTAL';
        print_table_line( $data, $file );
    }
    print_table_line( $data, "TOTAL" );
}

sub sort_files_by_size_desc {
    my $data = shift;
    return sort { $data->{$b}{size} <=> $data->{$a}{size} } keys %$data;
}

sub print_table_line {
    my ( $data, $file ) = @_;
    my $info       = $data->{$file};
    my $total_size = $data->{TOTAL}->{size} || return;
    my @data       = (
        to_percent( $info->{size} / $total_size ),
        $info->{size},
        $info->{lines},
        $info->{adds},
        $info->{removes},
        $info->{adds} - $info->{removes},
        get_filename($file),
    );
    print "| " . join( " | ", @data ) . " |\n";
}

sub get_filename {
    my $file = shift;

    # A special aggregate value.  Not a real filename to fix.
    return $file if $file eq 'TOTAL';

    # diffsplit turns foo/bar/baz.json into foo_bar_baz.json.diff.  We need to
    # look in this diff file to find the file's name.
    for my $line ( slurp($file) ) {
        my $path = is_diff_header($line) || next;
        return $path;
    }

    return $file;
}

sub line_count_info {
    my $file = shift;
    my ( $lines, $additions, $removals ) = ( 0, 0, 0 );
    for my $line ( slurp($file) ) {
        next if is_diff_header($line);
        $lines++;
        $additions++ if $line =~ /^\+/;
        $removals++  if $line =~ /^-/;
    }
    return (
        lines   => $lines,
        adds    => $additions,
        removes => $removals
    );
}

sub is_diff_header {
    my $line = shift;
    return $line =~ /^(?:\+|-){3}\s+(\S+)/ ? $1 : "";
}

sub to_percent {
    my $frac = shift || 0.0;
    return sprintf( "%0.2f", 100.0 * $frac );
}
