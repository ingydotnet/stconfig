#!/usr/bin/perl

# Extract a chunk of perl code into a new method/function
# modified from http://fsck.com/~jesse/extract

use warnings;
use strict;
use File::Temp;
use Config;

my $SUBNAME = shift || 'mysub_' . int( rand(1000) );

my $code = join('',<>);
print extract_method($code);

sub extract_method {
    my $code = shift;
    my $not_done = 1;
    my $args = [];
    while ($not_done) {
        my $tmp = write_attempt($code, $args);
	$not_done = try_args($tmp,$args);
    }
    return codegen($code,'final',$args);
}

sub write_attempt {
    my $code = shift;
    my $args = shift;
    my $tmp = File::Temp->new(SUFFIX => '.refactor');
    print $tmp codegen($code, 'test', $args);
    return $tmp;
}

sub try_args {
    my $tmp = shift;
    my $args = shift;
    my $not_done = 0;

    open( my $perl, "-|", "$Config{perlpath} -wcC $tmp 2>&1" )
	|| die $@;
    while ( my $item = <$perl> ) {
	if ( $item
	    =~ /Global symbol "(.*)" requires explicit package name/ )
	{
	    $not_done = 1;
	    push @$args, $1 unless (grep {$1 eq $_} @$args);
	}
    }

    return $not_done;
}

sub codegen {
    my $code = shift;
    my $mode = shift;
    my $args = shift;

    my $selforthis_signature = qr/^(\$self|\$this)$/;
    my ($class_obj) = grep { $_ =~ /$selforthis_signature/ } @$args;
    my @params = grep { $_ !~ /$selforthis_signature/ } @$args;

    my $lexicals = generate_lexicals($class_obj, \@params, $code);
    my $invocation = generate_invocation($class_obj, \@params);
    my $strict = ($mode eq 'test') ? 'use strict;' : '';

    my $generated = <<CODE;
$invocation
sub $SUBNAME {$strict
    $lexicals
    $code
}
CODE
    return $generated;
}

sub generate_invocation {
    my $class_obj = shift;
    my @params = @{(shift)};

    my $call = $SUBNAME;
    if ($class_obj) {
        $call = $class_obj . "->" . $SUBNAME;
    }

    return "$call("
        . join( ',', map { $_ =~ /^(\%|\@)/ ? '\\' . $_ : $_ } @params )
        . ");\n";
}

sub generate_lexicals { 
    my $class_obj = shift;
    my @params = @{(shift)};
    my $code = shift;
    
    unshift @params, $class_obj if $class_obj;
    my @lexicals = map {
            my $var = $_;
            if ( $var =~ /^(\%|\@)(.*)$/) {
                my $sigil = $1;
                my $name =  $2;
                "my $var = $sigil"."{(shift)};";
            } 
            else {
                "my $var = shift;";
            }
        } @params;

    return join("\n    ", @lexicals);
}
