#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

my $github_hook_url = 'http://topaz.socialtext.net/~audreyt/github_hook.cgi';

=head1 NAME

st-git-announce - Announce commits from a Git repository

=head1 SYNOPSIS

B<st-git-announce> S<[ B<-r> I<repo> ]> S<[ B<-b> I<branch> ]> I<commit>...

If -r and -b are not given, the current directory's repository/branch is used.

If any arguments in the I<commit> list does not look like a full commit ID
(40 hexadecimal characters), each argument is filtered through B<git rev-list>
to obtain the actual commit IDs to be announced.  In this case, the current
working directory must be a Git checkout of the same repository.

=head1 EXAMPLES

To announce all commits I<after> C<3aaf2b5>:

    st-git-announce 3aaf2b5..

To announce all commits I<after> C<3aaf2b5>, up to and I<including> C<4aaf2b5>:

    st-git-announce 3aaf2b5..4aaf2b5

To announce three individual commits in that order:

    st-git-announce 3aaf2b5 4aaf2b5 5aaf2b5

=cut

my ($repo, $ref);
GetOptions(
    'repository|repo|r' => \$repo,
    'branch|ref|b' => \$ref,
);

exec(perldoc => $0) unless @ARGV;

if (!$repo or !$ref or grep { not /^[0-9a-fA-F]{40}$/ } @ARGV) {
    my $remote_url = `git config remote.origin.url`
        or die "Not inside a Git checkout directory!\n";

    $remote_url =~ m{^.*/(.+)\.git$}
        or die "Malformed origin URL $remote_url: Expecting <.../REPO.git>.\n";
        
    if ($repo and $repo ne $1) {
        die "Repository name mismatch: Specified $repo, but cwd is $1\n";
    }

    $repo = $1;
    if (!$ref) {
        my $branches = `git branch --no-color`;
        $branches =~ /\*\s+(.+)/
            or die "Cannot find the current branch from:\n$branches\n";
        $ref = $1;
    }

    my $commits;
    foreach my $arg (@ARGV) {
        if ($arg =~ /[^\da-fA-F]/) {
            # Probably a ID..ID list: Grab everything matching that spec
            $commits .= `git rev-list --pretty=short --date-order --reverse @ARGV`;
        }
        else {
            # A (partial) commit ID: Grab that commit only
            $commits .= `git rev-list --pretty=short -n 1 @ARGV`;
        }
    }
    @ARGV = ($commits =~ /^commit\s+(.+)/mg)
        or die "No commits found matching the criteria: @ARGV\n";

    if (-t STDIN and -t STDOUT) {
        print $commits;
        print "*** About to announce: Does the above list look correct?\n";
        print "*** Press <Enter> to announce now, <Ctrl-C> to quit.\n";
        <STDIN>;
    }
}

use LWP::UserAgent;
use HTTP::Request::Common qw(GET POST);
use HTTP::Cookies ();

my $ua = LWP::UserAgent->new(requests_redirectable => [ 'GET', 'POST' ]);
my $response = $ua->request(
    POST $github_hook_url => [
        repository  => $repo,
        ref         => $ref,
        commits     => join ',', @ARGV,
    ]
);

print "*** Posting...\n";
if ($response->is_success) {
    print $response->content;
}
else {
    die $response->status_line;
}
