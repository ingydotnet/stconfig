#!/usr/bin/env perl
use strict;
use warnings;
use utf8;
BEGIN {
    # NUKE all "HARNESS_*" environment vars at the onset; even if we're
    # running under the Perl test harness, we *HAVE* to run against real live
    # servers and DBs (so don't let ST pick up that we're under the harness
    # and use a test one instead).
    delete $ENV{$_} for (grep { /HARNESS/ } keys %ENV);
}
use Socialtext::Resting;
use Socialtext::WikiObject::TestPlan;
use Getopt::Long;
use Test::More;
use Sys::Hostname qw/hostname/;
use POSIX qw(strftime);

our $VERSION = 1.0;

$SIG{INT} = sub { warn "Caught SIGINT\n"; exit 255 };

# Script to run wiki tests outside of `make test` harness.

my $dev_port = 20000 + $>;
my $hostname = hostname();

my $plan_server     = "http://$hostname:$dev_port";
my $plan_workspace  = 'wikitests';
my $plan_page       = 'Test Plan';

my $test_server     = "http://$hostname:$dev_port";
my $test_workspace  = 'test-data';
my $test_title      = 'Canonical Test Data Set';
my $test_username   = 'devnull1@socialtext.com';
my $test_email      = $test_username;
my $test_password   = 'd3vnu11l';
my $maximize        = 0;

my $version;
my $verbose;
my $time_out        = '30000';
my $fake_content_file;
my $perf_summary;
GetOptions(
    'plan-server=s'     => \$plan_server,
    'plan-workspace=s'  => \$plan_workspace,
    'plan-page=s'       => \$plan_page,
    'test-server=s'     => \$test_server,
    'test-workspace=s'  => \$test_workspace,
    'test-title=s'      => \$test_title,
    'test-username=s'   => \$test_username,
    'test-email=s'      => \$test_email,
    'test-password=s'   => \$test_password,
    'f|fake-content-file=s' => \$fake_content_file,
    'timeout=i'         => \$time_out,
    'maximize!'         => \$maximize,
    'verbose'           => \$verbose,
    'version'           => \$version,
    'perf-summary'      => \$perf_summary,
) or usage();

# Add current branch's lib to our include path
my $st_admin = qx(which st-admin);
(my $nlw_path = $st_admin) =~ s#/bin/st-admin.+##s;
unshift @INC, "$nlw_path/lib";
diag "Added $nlw_path/lib to \@INC...";
unshift @INC, "$nlw_path";
diag "Added $nlw_path to \@INC...";

if ($version) {
    my @libs = qw(
        WWW::Selenium
        Test::WWW::Selenium
        Socialtext::Resting
        Socialtext::WikiObject
        Socialtext::WikiObject::TestPlan
        Socialtext::WikiFixture
        Socialtext::WikiFixture::Selenese
        Socialtext::WikiFixture::Socialtext
    );

    my $mod = (stat $0)[9];
    $mod = strftime('%F %R', localtime($mod));
    print "$0 v$VERSION last-modified: $mod\n\n";

    for my $lib (@libs) {
        eval "require $lib";
        (my $file = "$lib.pm") =~ s{::}{/}g;
        my $ver = eval "\$${lib}::VERSION" || '???';
        my $mod = (stat $INC{$file})[9];
        $mod = strftime('%F %R', localtime($mod));
        print "$lib v$ver last-modified: $mod\n";
        if ($verbose) {
            require Digest::MD5;
            Digest::MD5->import('md5_hex');
            my $md5 = md5_hex($INC{$file});
            print "\t-- $INC{$file}\n";
            print "\t-- $md5\n";
        }
    }

    exit;
}

plan('no_plan');

my $rester;
if (!defined $fake_content_file) {
    $rester = Socialtext::Resting->new(
        server => $plan_server,
        username => 'tester@ken.socialtext.net',
        password => 'wikitest',
        workspace => $plan_workspace,
    );
}
else {
    require Socialtext::Resting::Mock;
    $rester = Socialtext::Resting::Mock->new(file => $fake_content_file);
}

# Set  the location of files for upload tests, depending on the
# selenium client and server platforms
my $wikitest_client_files_dir = {
    linux => '/opt/wikitest_files/',
    windows => 'C:\\wikitest_files\\',
    osx => '/private/wikitest_files/',
}->{$ENV{selenium_client_platform} || 'linux'};

my $wikitest_files_dir = {
    linux => '/opt/wikitest_files/',
    windows => 'C:\\wikitest_files\\',
    osx => '/private/wikitest_files/',
}->{$ENV{selenium_server_platform} || 'linux'};

my $test_start_time = _epoch_to_timpstamp(time);

diag "Testing $test_server\n";
(my $atmail = $test_email) =~ s#@#\\@#;
my $test_plan = Socialtext::WikiObject::TestPlan->new(
    rester => $rester,
    page => $plan_page,
    default_fixture => 'Socialtext',
    fixture_args => {
        maximize => $maximize,
        verbose => $verbose,
        host => $ENV{selenium_host} || 'galena.socialtext.net',
        port => $ENV{selenium_port} || 4444,
        browser => $ENV{selenium_browser} || '*firefox',
        browser_url => $test_server,
        workspace => $test_workspace,
        title => $test_title,
        username => $test_username,
        password => $test_password,
        email => $test_email,
        selenium_timeout => $time_out,
        wikitest_files => $wikitest_files_dir,
        wikitest_client_files => $wikitest_client_files_dir,
        hostname => $hostname,
        atmail => $atmail,
    },
);
$test_plan->run_tests;

if ($perf_summary) {
    my $test_end_time = _epoch_to_timpstamp(time);
    my $perf_script = '/usr/sbin/st-appliance-summarize-perf';
    require Socialtext::System;
    if (-x $perf_script) {
        warn "Ass-u-ming appliance, as $perf_script is found.\n";
        Socialtext::System::shell_run(
            $perf_script, '--log-file', '/var/log/nlw.log', 
            '--start-time', $test_start_time,
            '--end-time', $test_end_time,
        );
    }
    else {
        my $console_dir = "$nlw_path/../appliance/libsocialtext-appliance-perl";
        my $perf_script = "$console_dir/sbin/st-appliance-summarize-perf";
        die "Can't find $perf_script" unless -x $perf_script;

        # In a dev-env, we need to grep our log lines out of the global
        # nlw.log file, as it is shared.
        my $tmp_file = "/tmp/run-wiki-test-nlw.log.$$";
        Socialtext::System::shell_run(
            "grep '\\[$>\\]' /var/log/nlw.log > $tmp_file",
        );

        Socialtext::System::shell_run(
            $^X, '-I', "$console_dir/lib",
            $perf_script, '--log-file', $tmp_file, 
            '--start-time', $test_start_time,
            '--end-time', $test_end_time,
        );
    }
}

exit;


sub usage {
    print <<EOT;
USAGE: $0 [options]

This script executes testcases as defined on a wiki page.

Options:
 --plan-server [server] Specify which server has Test cases
                        Default '$plan_server'
 --plan-workspace [ws]  Specify which workspace contains the test plans
                        Default: '$plan_workspace'
 --plan-page [page]     Specify which page contains the test plan
                        Default: '$plan_page'
 --test-server [server] Specify which server the testing should occur on
                        Default '$test_server'
 --test-workspace [ws]  Specify which workspace the testing should occur on
                        Default: '$test_workspace'
 --test-title [name]    Specify the title of the test workspace
                        Default: '$test_title''
 --test-username [user] Specify which username the testing should use
                        Default: '$test_username'
 --test-password [pass] Specify which password the testing should use
                        Default: '$test_password'
 --test-email [email]   Specify which email the testing should use
                        Default: '$test_email'
 --timeout [ms]         Number of milliesconds to wait before timing out
                        Default: '10000'
 --fake-content-file [file] Specify a file to read from instead of the wiki.
 --verbose              Show debugging information
 --version              Show version information
 --nomaximize           Don't remove the selenium-rc frame in the browser
 --perf-summary         Output a summary of the performance timings

Environment Variables:
  selenium_host            => machine running the Selenium RC server
  selenium_port            => Selenium RC port
  selenium_browser         => browser string to pass to server
  selenium_client_platform => platform running NLW (linux)
  selenium_server_platform => platform running Selenium RC server [linux|windows|osx]
EOT
    exit -1;
}

sub _epoch_to_timpstamp {
    my $time = shift;
    my ($sec,$min,$hour,$mday,$mon,$year) = localtime($time);
    return sprintf '%d-%02d-%dT%d:%02d:%02d', $year + 1900, $mon + 1, $mday,
                $hour, $min, $sec;
}
